syntax = "proto3";
package canto.fees.v1;

import "cosmos/base/query/v1beta1/pagination.proto";
import "canto/fees/v1/genesis.proto";
import "canto/fees/v1/fees.proto";
import "google/api/annotations.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/Canto-Network/canto/v3/x/fees/types";

// Query defines the gRPC querier service.
service Query {
  // DevFeeInfos retrieves all registered contracts for fee distribution
  rpc DevFeeInfos(QueryDevFeeInfosRequest) returns (QueryDevFeeInfosResponse) {
    option (google.api.http).get = "/canto/fees/v1/fees";
  }

  // DevFeeInfo retrieves a registered contract for fee distribution
  rpc DevFeeInfo(QueryDevFeeInfoRequest) returns (QueryDevFeeInfoResponse) {
    option (google.api.http).get = "/canto/fees/v1/fees/{contract_address}";
  }

  // Params retrieves the fees module params
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/canto/fees/v1/params";
  }

  // DevFeeInfosPerDeployer retrieves all contracts that a deployer has
  // registered for fee distribution
  rpc DevFeeInfosPerDeployer(QueryDevFeeInfosPerDeployerRequest)
      returns (QueryDevFeeInfosPerDeployerResponse) {
    option (google.api.http).get = "/canto/fees/v1/fees/{deployer_address}";
  }
}

// QueryDevFeeInfosRequest is the request type for the Query/DevFeeInfos RPC
// method.
message QueryDevFeeInfosRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryDevFeeInfosResponse is the response type for the Query/DevFeeInfos
// RPC method.
message QueryDevFeeInfosResponse {
  repeated DevFeeInfo fees = 1 [ (gogoproto.nullable) = false ];
  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryDevFeeInfoRequest is the request type for the Query/DevFeeInfo RPC
// method.
message QueryDevFeeInfoRequest {
  // contract identifier is the hex contract address of a contract
  string contract_address = 1;
}

// QueryDevFeeInfoResponse is the response type for the Query/DevFeeInfo RPC
// method.
message QueryDevFeeInfoResponse {
  DevFeeInfo fee = 1 [ (gogoproto.nullable) = false ];
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is the response type for the Query/Params RPC
// method.
message QueryParamsResponse {
  Params params = 1 [ (gogoproto.nullable) = false ];
}

// QueryDevFeeInfosPerDeployerRequest is the request type for the
// Query/DevFeeInfosPerDeployer RPC method.
message QueryDevFeeInfosPerDeployerRequest {
  // deployer bech32 address
  string deployer_address = 1;
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryDevFeeInfosPerDeployerResponse is the response type for the
// Query/DevFeeInfosPerDeployer RPC method.
message QueryDevFeeInfosPerDeployerResponse {
  repeated DevFeeInfo fees = 1 [ (gogoproto.nullable) = false ];
  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}
