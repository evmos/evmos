syntax = "proto3";
package evmos.vesting.v1;

import "google/api/annotations.proto";
import "gogoproto/gogo.proto";
import "cosmos/vesting/v1beta1/vesting.proto";

option go_package = "github.com/tharsis/evmos/x/vesting/types";

// Msg defines the bank Msg service.
service Msg {
  // CreateClawbackVestingAccount defines a method that enables creating a
  // vesting account that is subject to clawback.
  rpc CreateClawbackVestingAccount(MsgCreateClawbackVestingAccount) returns (MsgCreateClawbackVestingAccountResponse) {
    option (google.api.http).get = "/evmos/vesting/v1/tx/create_clawback_vesting_account";
  };
  // Clawback removes the unvested tokens from a ClawbackVestingAccount.
  rpc Clawback(MsgClawback) returns (MsgClawbackResponse) {
    option (google.api.http).get = "/evmos/vesting/v1/tx/clawback";
  };
}

// MsgCreateClawbackVestingAccount defines a message that enables creating a ClawbackVestingAccount.
message MsgCreateClawbackVestingAccount {
  option (gogoproto.equal) = false;

  // Address of the account providing the funds, which must also sign the request.
  string from_address = 1 [(gogoproto.moretags) = "yaml:\"from_address\""];
  // Address of the account to receive the funds.
  string to_address = 2 [(gogoproto.moretags) = "yaml:\"to_address\""];
  // Start time of the vesting. Periods start relative to this time.
  int64 start_time = 3 [(gogoproto.moretags) = "yaml:\"start_time\""];
 // Unlocking events as a sequence of durations and amounts, starting relative to start_time.
  repeated cosmos.vesting.v1beta1.Period lockup_periods = 4 [
    (gogoproto.nullable) = false
  ];
 // Vesting events as a sequence of durations and amounts, starting relative to start_time.
  repeated cosmos.vesting.v1beta1.Period vesting_periods = 5 [
    (gogoproto.nullable) = false
  ];
  // If true, merge this new grant into an existing ClawbackVestingAccount,
  // or create it if it does not exist. If false, creates a new account.
  // New grants to an existing account must be from the same from_address.
  bool merge = 6;
}

// MsgCreateClawbackVestingAccountResponse defines the MsgCreateClawbackVestingAccount response type.
message MsgCreateClawbackVestingAccountResponse {}

// MsgClawback defines a message that removes unvested tokens from a ClawbackVestingAccount.
message MsgClawback {

  // funder_address is the address which funded the account
  string funder_address = 1;
  // address is the address of the ClawbackVestingAccount to claw back from.
  string address = 2;
  // dest_address specifies where the clawed-back tokens should be transferred.
  // If empty, the tokens will be transferred back to the original funder of the account.
  string dest_address = 3;
}

// MsgClawbackResponse defines the MsgClawback response type.
message MsgClawbackResponse {}
