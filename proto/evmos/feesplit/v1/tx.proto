syntax = "proto3";
package evmos.feesplit.v1;

import "google/api/annotations.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/evmos/evmos/v7/x/feesplit/types";

// Msg defines the fees Msg service.
service Msg {
  // RegisterFeeSplit registers a new contract for receiving transaction fees
  rpc RegisterFeeSplit(MsgRegisterFeeSplit) returns (MsgRegisterFeeSplitResponse) {
    option (google.api.http).post = "/evmos/feesplit/v1/tx/register_feesplit";
  };
  // UpdateFeeSplit updates the withdrawer address of a fee split
  rpc UpdateFeeSplit(MsgUpdateFeeSplit) returns (MsgUpdateFeeSplitResponse) {
    option (google.api.http).post = "/evmos/feesplit/v1/tx/update_feesplit";
  };
  // CancelFeeSplit cancels a contract's fee registration and further receival
  // of transaction fees
  rpc CancelFeeSplit(MsgCancelFeeSplit) returns (MsgCancelFeeSplitResponse) {
    option (google.api.http).post = "/evmos/feesplit/v1/tx/cancel_feesplit";
  };
}

// MsgRegisterFeeSplit defines a message that registers a FeeSplit
message MsgRegisterFeeSplit {
  option (gogoproto.equal) = false;
  // contract hex address
  string contract_address = 1;
  // bech32 address of message sender, must be the same as the origin EOA
  // sending the transaction which deploys the contract
  string deployer_address = 2;
  // bech32 address of account receiving the transaction fees
  string withdrawer_address = 3;
  // array of nonces from the address path, where the last nonce is the nonce
  // that determines the contract's address - it can be an EOA nonce or a
  // factory contract nonce
  repeated uint64 nonces = 4;
}

// MsgRegisterFeeSplitResponse defines the MsgRegisterFeeSplit response type
message MsgRegisterFeeSplitResponse {}

// MsgUpdateFeeSplit defines a message that updates the withdrawer address for a
// registered FeeSplit
message MsgUpdateFeeSplit {
  option (gogoproto.equal) = false;
  // contract hex address
  string contract_address = 1;
  // deployer bech32 address
  string deployer_address = 2;
  // new withdrawer bech32 address for receiving the transaction fees
  string withdrawer_address = 3;
}

// MsgUpdateFeeSplitResponse defines the MsgUpdateFeeSplit response type
message MsgUpdateFeeSplitResponse {}

// MsgCancelFeeSplit defines a message that cancels a registered FeeSplit
message MsgCancelFeeSplit {
  option (gogoproto.equal) = false;
  // contract hex address
  string contract_address = 1;
  // deployer bech32 address
  string deployer_address = 2;
}

// MsgCancelFeeSplitResponse defines the MsgCancelFeeSplit response type
message MsgCancelFeeSplitResponse {}
