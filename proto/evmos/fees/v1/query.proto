syntax = "proto3";
package evmos.fees.v1;

import "cosmos/base/query/v1beta1/pagination.proto";
import "evmos/fees/v1/genesis.proto";
import "evmos/fees/v1/fees.proto";
import "google/api/annotations.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/evmos/evmos/v6/x/fees/types";

// Query defines the gRPC querier service.
service Query {
  // Fees retrieves all registered contracts for fee distribution
  rpc Fees(QueryFeesRequest) returns (QueryFeesResponse) {
    option (google.api.http).get = "/evmos/fees/v1/fees";
  }

  // Fee retrieves a registered contract for fee distribution for a given
  // address
  rpc Fee(QueryFeeRequest) returns (QueryFeeResponse) {
    option (google.api.http).get = "/evmos/fees/v1/fees/{contract_address}";
  }

  // Params retrieves the fees module params
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/evmos/fees/v1/params";
  }

  // DeployerFees retrieves all contracts that a given deployer has registered
  // for fee distribution
  rpc DeployerFees(QueryDeployerFeesRequest)
      returns (QueryDeployerFeesResponse) {
    option (google.api.http).get = "/evmos/fees/v1/fees/{deployer_address}";
  }
}

// QueryFeesRequest is the request type for the Query/Fees RPC method.
message QueryFeesRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryFeesResponse is the response type for the Query/Fees RPC method.
message QueryFeesResponse {
  repeated Fee fees = 1 [ (gogoproto.nullable) = false ];
  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryFeeRequest is the request type for the Query/Fee RPC method.
message QueryFeeRequest {
  // contract identifier is the hex contract address of a contract
  string contract_address = 1;
}

// QueryFeeResponse is the response type for the Query/Fee RPC method.
message QueryFeeResponse {
  Fee fee = 1 [ (gogoproto.nullable) = false ];
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is the response type for the Query/Params RPC method.
message QueryParamsResponse {
  Params params = 1 [ (gogoproto.nullable) = false ];
}

// QueryDeployerFeesRequest is the request type for the Query/DeployerFees RPC
// method.
message QueryDeployerFeesRequest {
  // deployer bech32 address
  string deployer_address = 1;
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryDeployerFeesResponse is the response type for the Query/DeployerFees RPC
// method.
message QueryDeployerFeesResponse {
  repeated Fee fees = 1 [ (gogoproto.nullable) = false ];
  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}
