syntax = "proto3";
package evmos.erc20.v1;

import "cosmos/base/v1beta1/coin.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "evmos/erc20/v1/genesis.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";

option go_package = "github.com/evmos/evmos/v11/x/erc20/types";

// Msg defines the erc20 Msg service.
service Msg {
  // ConvertCoin mints a ERC20 representation of the native Cosmos coin denom
  // that is registered on the token mapping.
  rpc ConvertCoin(MsgConvertCoin) returns (MsgConvertCoinResponse) {
    option (google.api.http).get = "/evmos/erc20/v1/tx/convert_coin";
  };
  // ConvertERC20 mints a native Cosmos coin representation of the ERC20 token
  // contract that is registered on the token mapping.
  rpc ConvertERC20(MsgConvertERC20) returns (MsgConvertERC20Response) {
    option (google.api.http).get = "/evmos/erc20/v1/tx/convert_erc20";
  };
  // UpdateParams defined a governance operation for updating the x/erc20 module parameters.
  // The authority is hard-coded to the Cosmos SDK x/gov module account
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
}

// MsgConvertCoin defines a Msg to convert a native Cosmos coin to a ERC20 token
message MsgConvertCoin {
  // coin is a Cosmos coin whose denomination is registered in a token pair. The coin
  // amount defines the amount of coins to convert.
  cosmos.base.v1beta1.Coin coin = 1 [(gogoproto.nullable) = false];
  // receiver is the hex address to receive ERC20 token
  string receiver = 2;
  // sender is the cosmos bech32 address from the owner of the given Cosmos coins
  string sender = 3;
}

// MsgConvertCoinResponse returns no fields
message MsgConvertCoinResponse {}

// MsgConvertERC20 defines a Msg to convert a ERC20 token to a native Cosmos
// coin.
message MsgConvertERC20 {
  // contract_address of an ERC20 token contract, that is registered in a token pair
  string contract_address = 1;
  // amount of ERC20 tokens to convert
  string amount = 2 [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (gogoproto.nullable) = false];
  // receiver is the bech32 address to receive native Cosmos coins
  string receiver = 3;
  // sender is the hex address from the owner of the given ERC20 tokens
  string sender = 4;
}

// MsgConvertERC20Response returns no fields
message MsgConvertERC20Response {}

// MsgUpdateParams is the Msg/UpdateParams request type for Erc20 parameters.
// Since: cosmos-sdk 0.47
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";

  // authority is the address of the governance account.
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the x/evm parameters to update.
  // NOTE: All parameters must be supplied.
  Params params = 2 [(gogoproto.nullable) = false];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
// Since: cosmos-sdk 0.47
message MsgUpdateParamsResponse {}