// Copyright Tharsis Labs Ltd.(Evmos)
// SPDX-License-Identifier:ENCL-1.0(https://github.com/evmos/evmos/blob/main/LICENSE)
syntax = "proto3";
package evmos.erc20.v1;

import "amino/amino.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "evmos/erc20/v1/genesis.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";

option go_package = "github.com/evmos/evmos/v20/x/erc20/types";

// Msg defines the erc20 Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;
  // ConvertERC20 mints a native Cosmos coin representation of the ERC20 token
  // contract that is registered on the token mapping.
  rpc ConvertERC20(MsgConvertERC20) returns (MsgConvertERC20Response) {
    option (google.api.http).get = "/evmos/erc20/v1/tx/convert_erc20";
  };
  // UpdateParams defines a governance operation for updating the x/erc20 module parameters.
  // The authority is hard-coded to the Cosmos SDK x/gov module account
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);

  // TransferContractOwnership defines a Msg to transfer the ownership of the ERC20 token pair to the new owner
  rpc TransferContractOwnership(MsgTransferOwnership) returns (MsgTransferOwnershipResponse); 

  // Mint mints ERC20 tokens
  rpc Mint(MsgMint) returns (MsgMintResponse) {
    option (google.api.http).post = "/evmos/erc20/v1/tx/mint";
  };
  // Burn burns ERC20 tokens
  rpc Burn(MsgBurn) returns (MsgBurnResponse) {
    option (google.api.http).post = "/evmos/erc20/v1/tx/burn";
  };

  // RegisterERC20 defines a governance operation for registering a token pair for the specified erc20 contract.
  // The authority is hard-coded to the Cosmos SDK x/gov module account
  rpc RegisterERC20(MsgRegisterERC20) returns (MsgRegisterERC20Response);
  // ToggleConversion defines a governance operation for enabling/disablen a token pair conversion.
  // The authority is hard-coded to the Cosmos SDK x/gov module account
  rpc ToggleConversion(MsgToggleConversion) returns (MsgToggleConversionResponse);
}

// MsgConvertERC20 defines a Msg to convert a ERC20 token to a native Cosmos
// coin.
message MsgConvertERC20 {
  option (amino.name) = "evmos/MsgConvertERC20";
  option (cosmos.msg.v1.signer) = "sender";
  // contract_address of an ERC20 token contract, that is registered in a token pair
  string contract_address = 1;
  // amount of ERC20 tokens to convert
  string amount = 2
      [(gogoproto.customtype) = "cosmossdk.io/math.Int", (gogoproto.nullable) = false, (amino.dont_omitempty) = true];
  // receiver is the bech32 address to receive native Cosmos coins
  string receiver = 3;
  // sender is the hex address from the owner of the given ERC20 tokens
  string sender = 4;
}

// MsgConvertERC20Response returns no fields
message MsgConvertERC20Response {}

// MsgConvertCoin defines a Msg to convert a native Cosmos coin to a ERC20 token
message MsgConvertCoin {
  // coin is a Cosmos coin whose denomination is registered in a token pair. The coin
  // amount defines the amount of coins to convert.
  cosmos.base.v1beta1.Coin coin = 1 [(gogoproto.nullable) = false];
  // receiver is the hex address to receive ERC20 token
  string receiver = 2;
  // sender is the cosmos bech32 address from the owner of the given Cosmos coins
  string sender = 3;
}

// MsgConvertCoinResponse returns no fields
message MsgConvertCoinResponse {}

// MsgUpdateParams is the Msg/UpdateParams request type for Erc20 parameters.
// Since: cosmos-sdk 0.47
message MsgUpdateParams {
  option (amino.name) = "evmos/x/erc20/MsgUpdateParams";
  option (cosmos.msg.v1.signer) = "authority";

  // authority is the address of the governance account.
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the x/evm parameters to update.
  // NOTE: All parameters must be supplied.
  Params params = 2 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
// Since: cosmos-sdk 0.47
message MsgUpdateParamsResponse {}

// MsgTransferOwnership defines a Msg to transfer the ownership of the ERC20 token pair to the new owner
message MsgTransferOwnership {
  option (cosmos.msg.v1.signer) = "authority";

  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  // token identifier can be either the hex contract address of the ERC20 or the
  // Cosmos base denomination
  string token = 2;
  // new_owner is the hex address of the new owner
  string new_owner = 3; 
}

// MsgTransferOwnershipResponse returns no fields
message MsgTransferOwnershipResponse {}

// MsgMint defines a Msg to mint ERC20 tokens
message MsgMint {
  option (cosmos.msg.v1.signer) = "sender";
  // contract_address of an ERC20 token contract, that is registered in a token pair
  string contract_address = 1;
  // amount of ERC20 tokens to mint
  string amount = 2 [(gogoproto.customtype) = "cosmossdk.io/math.Int", (gogoproto.nullable) = false];
  // to is the address to mint the tokens to
  string to = 3;
  // sender is the address of the sender
  string sender = 4;
}

message MsgMintResponse {}

// MsgBurn defines a Msg to burn ERC20 tokens
message MsgBurn {
  option (cosmos.msg.v1.signer) = "sender";
  // contract_address of an ERC20 token contract, that is registered in a token pair
  string contract_address = 1;
  // amount of ERC20 tokens to burn
  string amount = 2 [(gogoproto.customtype) = "cosmossdk.io/math.Int", (gogoproto.nullable) = false];
  // sender is the address of the sender
  string sender = 3;
}

message MsgBurnResponse {}

// MsgRegisterERC20 is the Msg/RegisterERC20 request type for registering
// an Erc20 contract token pair.
message MsgRegisterERC20 {
  option (amino.name) = "evmos/x/erc20/MsgRegisterERC20";
  option (cosmos.msg.v1.signer) = "authority";

  // authority is the address of the governance account.
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // erc20addresses is a slice of ERC20 token contract hex addresses
  repeated string erc20addresses = 2;
}

// MsgRegisterERC20Response defines the response structure for executing a
// MsgRegisterERC20 message.
message MsgRegisterERC20Response {}

// MsgToggleConversion is the Msg/MsgToggleConversion request type for toggling
// an Erc20 contract conversion capability.
message MsgToggleConversion {
  option (amino.name) = "evmos/x/erc20/MsgToggleConversion";
  option (cosmos.msg.v1.signer) = "authority";

  // authority is the address of the governance account.
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // token identifier can be either the hex contract address of the ERC20 or the
  // Cosmos base denomination
  string token = 2;
}

// MsgToggleConversionResponse defines the response structure for executing a
// ToggleConversion message.
message MsgToggleConversionResponse {}
