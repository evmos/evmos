syntax = "proto3";
package evmos.revenue.v1;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";

option go_package = "github.com/evmos/evmos/v10/x/revenue/types";

// Msg defines the fees Msg service.
service Msg {
  // RegisterRevenue registers a new contract for receiving transaction fees
  rpc RegisterRevenue(MsgRegisterRevenue) returns (MsgRegisterRevenueResponse) {
    option (google.api.http).post = "/evmos/revenue/v1/tx/register_revenue";
  };
  // UpdateRevenue updates the withdrawer address of a revenue
  rpc UpdateRevenue(MsgUpdateRevenue) returns (MsgUpdateRevenueResponse) {
    option (google.api.http).post = "/evmos/revenue/v1/tx/update_revenue";
  };
  // CancelRevenue cancels a contract's fee registration and further receival
  // of transaction fees
  rpc CancelRevenue(MsgCancelRevenue) returns (MsgCancelRevenueResponse) {
    option (google.api.http).post = "/evmos/revenue/v1/tx/cancel_revenue";
  };
}

// MsgRegisterRevenue defines a message that registers a Revenue
message MsgRegisterRevenue {
  option (gogoproto.equal) = false;
  // contract_address in hex format
  string contract_address = 1;
  // deployer_address is the bech32 address of message sender. It must be the same as the origin EOA
  // sending the transaction which deploys the contract
  string deployer_address = 2;
  // withdrawer_address is the bech32 address of account receiving the transaction fees
  string withdrawer_address = 3;
  // nonces is an array of nonces from the address path, where the last nonce is the nonce
  // that determines the contract's address - it can be an EOA nonce or a
  // factory contract nonce
  repeated uint64 nonces = 4;
}

// MsgRegisterRevenueResponse defines the MsgRegisterRevenue response type
message MsgRegisterRevenueResponse {}

// MsgUpdateRevenue defines a message that updates the withdrawer address for a
// registered Revenue
message MsgUpdateRevenue {
  option (gogoproto.equal) = false;
  // contract_address in hex format
  string contract_address = 1;
  // deployer_address is the bech32 address of message sender. It must be the same as the origin EOA
  // sending the transaction which deploys the contract
  string deployer_address = 2;
  // withdrawer_address is the bech32 address of account receiving the transaction fees
  string withdrawer_address = 3;
}

// MsgUpdateRevenueResponse defines the MsgUpdateRevenue response type
message MsgUpdateRevenueResponse {}

// MsgCancelRevenue defines a message that cancels a registered Revenue
message MsgCancelRevenue {
  option (gogoproto.equal) = false;
  // contract_address in hex format
  string contract_address = 1;
  // deployer_address is the bech32 address of message sender. It must be the same as the origin EOA
  // sending the transaction which deploys the contract
  string deployer_address = 2;
}

// MsgCancelRevenueResponse defines the MsgCancelRevenue response type
message MsgCancelRevenueResponse {}
