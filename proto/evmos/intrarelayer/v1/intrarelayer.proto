syntax = "proto3";
package evmos.intrarelayer.v1;

import "gogoproto/gogo.proto";
import "cosmos/bank/v1beta1/bank.proto";
option go_package = "github.com/tharsis/evmos/x/intrarelayer/types";


// Owner enumerates the ownership of a ERC20 contract.
enum Owner {
    option (gogoproto.goproto_enum_prefix) = false;
    // INVALID_OWNER defines an invalid/undefined owner.
    INVALID_OWNER = 0;
    // MODULE_OWNER erc20 is owned by the irm.
    MODULE_OWNER = 1;
    // EXTERNAL_OWNER erc20 is owned by an external account.
    EXTERNAL_OWNER = 2;
}

// TokenPair defines an instance that records pairing consisting of a Cosmos
// native Coin and an ERC20 token address.
message TokenPair {
    option (gogoproto.equal) = true;
    // address of ERC20 contract token
    string erc20_address = 1;
    // cosmos base denomination to be mapped to
    string denom = 2;
    // shows token mapping enable status
    bool enabled = 3;
    // ERC20 owner address ENUM (0 invalid, 1 ModuleAccount, 2 external address)
    Owner contract_owner = 4;
}

// RegisterCoinProposal is a gov Content type to register a token pair
message RegisterCoinProposal {
    option (gogoproto.equal) = true;
    // title of the proposal
    string title         = 1;
    // proposal description
    string description   = 2;
    // token pair of Cosmos native denom and ERC20 token address
    cosmos.bank.v1beta1.Metadata metadata = 3 [(gogoproto.nullable) = false];
    
}

// RegisterCoinProposal is a gov Content type to register a token pair
message RegisterERC20Proposal {
    option (gogoproto.equal) = true;
    // title of the proposal
    string title         = 1;
    // proposal description
    string description   = 2;
    // token pair of Cosmos native denom and ERC20 token address
    string erc20address = 3;

}


// EnableTokenRelayProposal is a gov Content type to enable the internal
// relaying of a token pair.
message EnableTokenRelayProposal {
    option (gogoproto.equal) = true;
    // title of the proposal
    string title         = 1;
    // proposal description
    string description   = 2;
    // token identifier can be either the hex contract address of the ERC20 or the
    // Cosmos base denomination
    string token = 3;
}

// UpdateTokenPairERC20Proposal is a gov Content type to update a token pair's
// ERC20 contract address.
message UpdateTokenPairERC20Proposal {
    option (gogoproto.equal) = true;
    // title of the proposal
    string title         = 1;
    // proposal description
    string description   = 2;
    // address of ERC20 contract token
    string erc20_address = 3;
    // new address of ERC20 contract token
    string new_erc20_address = 4;
}
