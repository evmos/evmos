syntax = "proto3";
package evmos.claims.v1;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "cosmos/base/v1beta1/coin.proto";
import "evmos/claims/v1/claims.proto";
import "evmos/claims/v1/genesis.proto";

option go_package = "github.com/tharsis/evmos/x/claims/types";

// Query defines the gRPC querier service.
service Query {
  // TotalUnclaimed queries the total unclaimed tokens from the airdrop
  rpc TotalUnclaimed(QueryTotalUnclaimedRequest)
      returns (QueryTotalUnclaimedResponse) {
    option (google.api.http).get =
        "/evmos/claims/v1/total_unclaimed";
  }
  // Params returns the claim module parameters
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/evmos/claims/v1/params";
  }
  // ClaimRecords returns all the claims record
  rpc ClaimRecords(QueryClaimRecordsRequest) returns (QueryClaimRecordsResponse) {
    option (google.api.http).get =
        "/evmos/claims/v1/claims_records";
  }
  // ClaimRecord returns the claims record for a given address
  rpc ClaimRecord(QueryClaimRecordRequest) returns (QueryClaimRecordResponse) {
    option (google.api.http).get =
        "/evmos/claims/v1/claims_records/{address}";
  }
}

// QueryTotalUnclaimedRequest is the request type for the Query/TotalUnclaimed RPC method.
message QueryTotalUnclaimedRequest {}

// QueryTotalUnclaimedResponse is the response type for the Query/TotalUnclaimed RPC method.
message QueryTotalUnclaimedResponse {
  // coins define the unclaimed coins
  repeated cosmos.base.v1beta1.Coin coins = 1 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is the response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params defines the parameters of the module.
  Params params = 1 [ (gogoproto.nullable) = false ];
}

// QueryClaimRecordsRequest is the request type for the Query/ClaimRecords RPC method.
message QueryClaimRecordsRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryClaimRecordsResponse is the response type for the Query/ClaimRecords RPC method.
message QueryClaimRecordsResponse {
  repeated ClaimRecordAddress claims = 1 [(gogoproto.nullable) = false];
  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryClaimRecordRequest is the request type for the Query/ClaimRecord RPC method.
message QueryClaimRecordRequest {
  string address = 1;
}

// QueryClaimRecordResponse is the response type for the Query/ClaimRecord RPC method.
message QueryClaimRecordResponse {
  // total initial claimable amount for the user
  string initial_claimable_amount = 1 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  repeated Claim claims = 2 [(gogoproto.nullable) = false];
}
