// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: evmos/feesplit/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgRegisterFeeSplit defines a message that registers a FeeSplit
type MsgRegisterFeeSplit struct {
	// contract hex address
	ContractAddress string `protobuf:"bytes,1,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	// bech32 address of message sender, must be the same as the origin EOA
	// sending the transaction which deploys the contract
	DeployerAddress string `protobuf:"bytes,2,opt,name=deployer_address,json=deployerAddress,proto3" json:"deployer_address,omitempty"`
	// bech32 address of account receiving the transaction fees
	WithdrawerAddress string `protobuf:"bytes,3,opt,name=withdrawer_address,json=withdrawerAddress,proto3" json:"withdrawer_address,omitempty"`
	// array of nonces from the address path, where the last nonce is the nonce
	// that determines the contract's address - it can be an EOA nonce or a
	// factory contract nonce
	Nonces []uint64 `protobuf:"varint,4,rep,packed,name=nonces,proto3" json:"nonces,omitempty"`
}

func (m *MsgRegisterFeeSplit) Reset()         { *m = MsgRegisterFeeSplit{} }
func (m *MsgRegisterFeeSplit) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterFeeSplit) ProtoMessage()    {}
func (*MsgRegisterFeeSplit) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff74a11a6f0bacb5, []int{0}
}
func (m *MsgRegisterFeeSplit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterFeeSplit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterFeeSplit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterFeeSplit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterFeeSplit.Merge(m, src)
}
func (m *MsgRegisterFeeSplit) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterFeeSplit) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterFeeSplit.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterFeeSplit proto.InternalMessageInfo

func (m *MsgRegisterFeeSplit) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func (m *MsgRegisterFeeSplit) GetDeployerAddress() string {
	if m != nil {
		return m.DeployerAddress
	}
	return ""
}

func (m *MsgRegisterFeeSplit) GetWithdrawerAddress() string {
	if m != nil {
		return m.WithdrawerAddress
	}
	return ""
}

func (m *MsgRegisterFeeSplit) GetNonces() []uint64 {
	if m != nil {
		return m.Nonces
	}
	return nil
}

// MsgRegisterFeeSplitResponse defines the MsgRegisterFeeSplit response type
type MsgRegisterFeeSplitResponse struct {
}

func (m *MsgRegisterFeeSplitResponse) Reset()         { *m = MsgRegisterFeeSplitResponse{} }
func (m *MsgRegisterFeeSplitResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterFeeSplitResponse) ProtoMessage()    {}
func (*MsgRegisterFeeSplitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff74a11a6f0bacb5, []int{1}
}
func (m *MsgRegisterFeeSplitResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterFeeSplitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterFeeSplitResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterFeeSplitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterFeeSplitResponse.Merge(m, src)
}
func (m *MsgRegisterFeeSplitResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterFeeSplitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterFeeSplitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterFeeSplitResponse proto.InternalMessageInfo

// MsgUpdateFeeSplit defines a message that updates the withdrawer address for a
// registered FeeSplit
type MsgUpdateFeeSplit struct {
	// contract hex address
	ContractAddress string `protobuf:"bytes,1,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	// deployer bech32 address
	DeployerAddress string `protobuf:"bytes,2,opt,name=deployer_address,json=deployerAddress,proto3" json:"deployer_address,omitempty"`
	// new withdrawer bech32 address for receiving the transaction fees
	WithdrawerAddress string `protobuf:"bytes,3,opt,name=withdrawer_address,json=withdrawerAddress,proto3" json:"withdrawer_address,omitempty"`
}

func (m *MsgUpdateFeeSplit) Reset()         { *m = MsgUpdateFeeSplit{} }
func (m *MsgUpdateFeeSplit) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateFeeSplit) ProtoMessage()    {}
func (*MsgUpdateFeeSplit) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff74a11a6f0bacb5, []int{2}
}
func (m *MsgUpdateFeeSplit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateFeeSplit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateFeeSplit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateFeeSplit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateFeeSplit.Merge(m, src)
}
func (m *MsgUpdateFeeSplit) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateFeeSplit) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateFeeSplit.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateFeeSplit proto.InternalMessageInfo

func (m *MsgUpdateFeeSplit) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func (m *MsgUpdateFeeSplit) GetDeployerAddress() string {
	if m != nil {
		return m.DeployerAddress
	}
	return ""
}

func (m *MsgUpdateFeeSplit) GetWithdrawerAddress() string {
	if m != nil {
		return m.WithdrawerAddress
	}
	return ""
}

// MsgUpdateFeeSplitResponse defines the MsgUpdateFeeSplit response type
type MsgUpdateFeeSplitResponse struct {
}

func (m *MsgUpdateFeeSplitResponse) Reset()         { *m = MsgUpdateFeeSplitResponse{} }
func (m *MsgUpdateFeeSplitResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateFeeSplitResponse) ProtoMessage()    {}
func (*MsgUpdateFeeSplitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff74a11a6f0bacb5, []int{3}
}
func (m *MsgUpdateFeeSplitResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateFeeSplitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateFeeSplitResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateFeeSplitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateFeeSplitResponse.Merge(m, src)
}
func (m *MsgUpdateFeeSplitResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateFeeSplitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateFeeSplitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateFeeSplitResponse proto.InternalMessageInfo

// MsgCancelFeeSplit defines a message that cancels a registered FeeSplit
type MsgCancelFeeSplit struct {
	// contract hex address
	ContractAddress string `protobuf:"bytes,1,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	// deployer bech32 address
	DeployerAddress string `protobuf:"bytes,2,opt,name=deployer_address,json=deployerAddress,proto3" json:"deployer_address,omitempty"`
}

func (m *MsgCancelFeeSplit) Reset()         { *m = MsgCancelFeeSplit{} }
func (m *MsgCancelFeeSplit) String() string { return proto.CompactTextString(m) }
func (*MsgCancelFeeSplit) ProtoMessage()    {}
func (*MsgCancelFeeSplit) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff74a11a6f0bacb5, []int{4}
}
func (m *MsgCancelFeeSplit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelFeeSplit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelFeeSplit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelFeeSplit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelFeeSplit.Merge(m, src)
}
func (m *MsgCancelFeeSplit) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelFeeSplit) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelFeeSplit.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelFeeSplit proto.InternalMessageInfo

func (m *MsgCancelFeeSplit) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func (m *MsgCancelFeeSplit) GetDeployerAddress() string {
	if m != nil {
		return m.DeployerAddress
	}
	return ""
}

// MsgCancelFeeSplitResponse defines the MsgCancelFeeSplit response type
type MsgCancelFeeSplitResponse struct {
}

func (m *MsgCancelFeeSplitResponse) Reset()         { *m = MsgCancelFeeSplitResponse{} }
func (m *MsgCancelFeeSplitResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCancelFeeSplitResponse) ProtoMessage()    {}
func (*MsgCancelFeeSplitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff74a11a6f0bacb5, []int{5}
}
func (m *MsgCancelFeeSplitResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelFeeSplitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelFeeSplitResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelFeeSplitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelFeeSplitResponse.Merge(m, src)
}
func (m *MsgCancelFeeSplitResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelFeeSplitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelFeeSplitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelFeeSplitResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgRegisterFeeSplit)(nil), "evmos.feesplit.v1.MsgRegisterFeeSplit")
	proto.RegisterType((*MsgRegisterFeeSplitResponse)(nil), "evmos.feesplit.v1.MsgRegisterFeeSplitResponse")
	proto.RegisterType((*MsgUpdateFeeSplit)(nil), "evmos.feesplit.v1.MsgUpdateFeeSplit")
	proto.RegisterType((*MsgUpdateFeeSplitResponse)(nil), "evmos.feesplit.v1.MsgUpdateFeeSplitResponse")
	proto.RegisterType((*MsgCancelFeeSplit)(nil), "evmos.feesplit.v1.MsgCancelFeeSplit")
	proto.RegisterType((*MsgCancelFeeSplitResponse)(nil), "evmos.feesplit.v1.MsgCancelFeeSplitResponse")
}

func init() { proto.RegisterFile("evmos/feesplit/v1/tx.proto", fileDescriptor_ff74a11a6f0bacb5) }

var fileDescriptor_ff74a11a6f0bacb5 = []byte{
	// 444 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x94, 0x4f, 0x8b, 0xd3, 0x40,
	0x14, 0xc0, 0x33, 0x9b, 0xb2, 0xe0, 0x1c, 0x74, 0x1b, 0x45, 0xd6, 0xac, 0xc6, 0x25, 0xa8, 0xbb,
	0x2b, 0x6e, 0x86, 0xd5, 0x8b, 0x78, 0xf3, 0x0f, 0xde, 0x7a, 0x89, 0x78, 0xf1, 0x52, 0xa6, 0xc9,
	0x73, 0x1a, 0x48, 0x67, 0x42, 0x66, 0x9a, 0xb6, 0x57, 0x3f, 0x81, 0xd0, 0xa3, 0x20, 0x7e, 0x0c,
	0x3f, 0x82, 0x37, 0x0b, 0x5e, 0x3c, 0x4a, 0xeb, 0xc1, 0x8f, 0x21, 0x9d, 0xfc, 0xa9, 0x69, 0x53,
	0xec, 0x45, 0xf0, 0x12, 0x26, 0xef, 0xfd, 0xde, 0x9b, 0x5f, 0xf2, 0x26, 0xc1, 0x36, 0x64, 0x03,
	0x21, 0xc9, 0x5b, 0x00, 0x99, 0xc4, 0x91, 0x22, 0xd9, 0x05, 0x51, 0x63, 0x2f, 0x49, 0x85, 0x12,
	0x56, 0x5b, 0xe7, 0xbc, 0x32, 0xe7, 0x65, 0x17, 0xf6, 0x4d, 0x26, 0x04, 0x8b, 0x81, 0xd0, 0x24,
	0x22, 0x94, 0x73, 0xa1, 0xa8, 0x8a, 0x04, 0x97, 0x79, 0x81, 0x7d, 0x8d, 0x09, 0x26, 0xf4, 0x92,
	0x2c, 0x57, 0x79, 0xd4, 0xfd, 0x8c, 0xf0, 0xd5, 0x8e, 0x64, 0x3e, 0xb0, 0x48, 0x2a, 0x48, 0x5f,
	0x02, 0xbc, 0x5a, 0xb6, 0xb3, 0xce, 0xf0, 0x41, 0x20, 0xb8, 0x4a, 0x69, 0xa0, 0xba, 0x34, 0x0c,
	0x53, 0x90, 0xf2, 0x10, 0x1d, 0xa3, 0xd3, 0x4b, 0xfe, 0x95, 0x32, 0xfe, 0x34, 0x0f, 0x2f, 0xd1,
	0x10, 0x92, 0x58, 0x4c, 0x20, 0xad, 0xd0, 0xbd, 0x1c, 0x2d, 0xe3, 0x25, 0x7a, 0x8e, 0xad, 0x51,
	0xa4, 0xfa, 0x61, 0x4a, 0x47, 0x7f, 0xc0, 0xa6, 0x86, 0xdb, 0xab, 0x4c, 0x89, 0x5f, 0xc7, 0xfb,
	0x5c, 0xf0, 0x00, 0xe4, 0x61, 0xeb, 0xd8, 0x3c, 0x6d, 0xf9, 0xc5, 0xdd, 0x93, 0xd6, 0xaf, 0x4f,
	0xb7, 0x0d, 0xf7, 0x16, 0x3e, 0x6a, 0x30, 0xf7, 0x41, 0x26, 0x82, 0x4b, 0x70, 0x3f, 0x22, 0xdc,
	0xee, 0x48, 0xf6, 0x3a, 0x09, 0xa9, 0x82, 0xff, 0xea, 0xb9, 0x0a, 0xff, 0x23, 0x7c, 0x63, 0xc3,
	0xaf, 0xb2, 0x17, 0x5a, 0xfe, 0x39, 0xe5, 0x01, 0xc4, 0xff, 0x56, 0xbe, 0x66, 0x53, 0xdf, 0xb0,
	0xb4, 0x79, 0xf8, 0xd5, 0xc4, 0x66, 0x47, 0x32, 0xeb, 0x03, 0xc2, 0x07, 0x1b, 0x47, 0xe5, 0x9e,
	0xb7, 0x71, 0x14, 0xbd, 0x86, 0xc1, 0xd8, 0xde, 0x6e, 0x5c, 0xf5, 0x0a, 0xc8, 0xbb, 0x6f, 0x3f,
	0xa7, 0x7b, 0x67, 0xee, 0x09, 0x69, 0xfa, 0x0c, 0x48, 0x5a, 0xd4, 0x75, 0xcb, 0xb8, 0x35, 0x45,
	0xf8, 0xf2, 0xda, 0xb8, 0xef, 0x34, 0xef, 0x59, 0xa7, 0xec, 0x07, 0xbb, 0x50, 0x95, 0xd7, 0xb9,
	0xf6, 0x3a, 0x71, 0xef, 0x36, 0x7b, 0x0d, 0x75, 0x55, 0xdd, 0x6a, 0x6d, 0x8e, 0x5b, 0xac, 0xea,
	0xd4, 0x36, 0xab, 0xe6, 0x11, 0xfd, 0xcd, 0x2a, 0xd0, 0x55, 0x95, 0xd5, 0xb3, 0x17, 0x5f, 0xe6,
	0x0e, 0x9a, 0xcd, 0x1d, 0xf4, 0x63, 0xee, 0xa0, 0xf7, 0x0b, 0xc7, 0x98, 0x2d, 0x1c, 0xe3, 0xfb,
	0xc2, 0x31, 0xde, 0xdc, 0x67, 0x91, 0xea, 0x0f, 0x7b, 0x5e, 0x20, 0x06, 0x45, 0xab, 0xfc, 0x9a,
	0x3d, 0x26, 0xe3, 0x55, 0x57, 0x35, 0x49, 0x40, 0xf6, 0xf6, 0xf5, 0x4f, 0xe4, 0xd1, 0xef, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x54, 0xae, 0xda, 0x5b, 0xa9, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// RegisterFeeSplit registers a new contract for receiving transaction fees
	RegisterFeeSplit(ctx context.Context, in *MsgRegisterFeeSplit, opts ...grpc.CallOption) (*MsgRegisterFeeSplitResponse, error)
	// UpdateFeeSplit updates the withdrawer address of a fee split
	UpdateFeeSplit(ctx context.Context, in *MsgUpdateFeeSplit, opts ...grpc.CallOption) (*MsgUpdateFeeSplitResponse, error)
	// CancelFeeSplit cancels a contract's fee registration and further receival
	// of transaction fees
	CancelFeeSplit(ctx context.Context, in *MsgCancelFeeSplit, opts ...grpc.CallOption) (*MsgCancelFeeSplitResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) RegisterFeeSplit(ctx context.Context, in *MsgRegisterFeeSplit, opts ...grpc.CallOption) (*MsgRegisterFeeSplitResponse, error) {
	out := new(MsgRegisterFeeSplitResponse)
	err := c.cc.Invoke(ctx, "/evmos.feesplit.v1.Msg/RegisterFeeSplit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateFeeSplit(ctx context.Context, in *MsgUpdateFeeSplit, opts ...grpc.CallOption) (*MsgUpdateFeeSplitResponse, error) {
	out := new(MsgUpdateFeeSplitResponse)
	err := c.cc.Invoke(ctx, "/evmos.feesplit.v1.Msg/UpdateFeeSplit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CancelFeeSplit(ctx context.Context, in *MsgCancelFeeSplit, opts ...grpc.CallOption) (*MsgCancelFeeSplitResponse, error) {
	out := new(MsgCancelFeeSplitResponse)
	err := c.cc.Invoke(ctx, "/evmos.feesplit.v1.Msg/CancelFeeSplit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// RegisterFeeSplit registers a new contract for receiving transaction fees
	RegisterFeeSplit(context.Context, *MsgRegisterFeeSplit) (*MsgRegisterFeeSplitResponse, error)
	// UpdateFeeSplit updates the withdrawer address of a fee split
	UpdateFeeSplit(context.Context, *MsgUpdateFeeSplit) (*MsgUpdateFeeSplitResponse, error)
	// CancelFeeSplit cancels a contract's fee registration and further receival
	// of transaction fees
	CancelFeeSplit(context.Context, *MsgCancelFeeSplit) (*MsgCancelFeeSplitResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) RegisterFeeSplit(ctx context.Context, req *MsgRegisterFeeSplit) (*MsgRegisterFeeSplitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterFeeSplit not implemented")
}
func (*UnimplementedMsgServer) UpdateFeeSplit(ctx context.Context, req *MsgUpdateFeeSplit) (*MsgUpdateFeeSplitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFeeSplit not implemented")
}
func (*UnimplementedMsgServer) CancelFeeSplit(ctx context.Context, req *MsgCancelFeeSplit) (*MsgCancelFeeSplitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelFeeSplit not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_RegisterFeeSplit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterFeeSplit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterFeeSplit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evmos.feesplit.v1.Msg/RegisterFeeSplit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterFeeSplit(ctx, req.(*MsgRegisterFeeSplit))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateFeeSplit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateFeeSplit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateFeeSplit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evmos.feesplit.v1.Msg/UpdateFeeSplit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateFeeSplit(ctx, req.(*MsgUpdateFeeSplit))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CancelFeeSplit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCancelFeeSplit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CancelFeeSplit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evmos.feesplit.v1.Msg/CancelFeeSplit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CancelFeeSplit(ctx, req.(*MsgCancelFeeSplit))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "evmos.feesplit.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterFeeSplit",
			Handler:    _Msg_RegisterFeeSplit_Handler,
		},
		{
			MethodName: "UpdateFeeSplit",
			Handler:    _Msg_UpdateFeeSplit_Handler,
		},
		{
			MethodName: "CancelFeeSplit",
			Handler:    _Msg_CancelFeeSplit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "evmos/feesplit/v1/tx.proto",
}

func (m *MsgRegisterFeeSplit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterFeeSplit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterFeeSplit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Nonces) > 0 {
		dAtA2 := make([]byte, len(m.Nonces)*10)
		var j1 int
		for _, num := range m.Nonces {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintTx(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x22
	}
	if len(m.WithdrawerAddress) > 0 {
		i -= len(m.WithdrawerAddress)
		copy(dAtA[i:], m.WithdrawerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.WithdrawerAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DeployerAddress) > 0 {
		i -= len(m.DeployerAddress)
		copy(dAtA[i:], m.DeployerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DeployerAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterFeeSplitResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterFeeSplitResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterFeeSplitResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateFeeSplit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateFeeSplit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateFeeSplit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WithdrawerAddress) > 0 {
		i -= len(m.WithdrawerAddress)
		copy(dAtA[i:], m.WithdrawerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.WithdrawerAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DeployerAddress) > 0 {
		i -= len(m.DeployerAddress)
		copy(dAtA[i:], m.DeployerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DeployerAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateFeeSplitResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateFeeSplitResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateFeeSplitResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCancelFeeSplit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelFeeSplit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelFeeSplit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DeployerAddress) > 0 {
		i -= len(m.DeployerAddress)
		copy(dAtA[i:], m.DeployerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DeployerAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCancelFeeSplitResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelFeeSplitResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelFeeSplitResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgRegisterFeeSplit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DeployerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.WithdrawerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Nonces) > 0 {
		l = 0
		for _, e := range m.Nonces {
			l += sovTx(uint64(e))
		}
		n += 1 + sovTx(uint64(l)) + l
	}
	return n
}

func (m *MsgRegisterFeeSplitResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateFeeSplit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DeployerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.WithdrawerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateFeeSplitResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCancelFeeSplit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DeployerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCancelFeeSplitResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgRegisterFeeSplit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterFeeSplit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterFeeSplit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeployerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeployerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithdrawerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Nonces = append(m.Nonces, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTx
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTx
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Nonces) == 0 {
					m.Nonces = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Nonces = append(m.Nonces, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonces", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterFeeSplitResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterFeeSplitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterFeeSplitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateFeeSplit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateFeeSplit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateFeeSplit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeployerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeployerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithdrawerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateFeeSplitResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateFeeSplitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateFeeSplitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelFeeSplit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelFeeSplit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelFeeSplit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeployerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeployerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelFeeSplitResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelFeeSplitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelFeeSplitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
