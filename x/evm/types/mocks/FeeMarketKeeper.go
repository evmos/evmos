// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	big "math/big"

	feemarkettypes "github.com/evmos/evmos/v16/x/feemarket/types"

	mock "github.com/stretchr/testify/mock"

	types "github.com/cosmos/cosmos-sdk/types"
)

// FeeMarketKeeper is an autogenerated mock type for the FeeMarketKeeper type
type FeeMarketKeeper struct {
	mock.Mock
}

// AddTransientGasWanted provides a mock function with given fields: ctx, gasWanted
func (_m *FeeMarketKeeper) AddTransientGasWanted(ctx types.Context, gasWanted uint64) (uint64, error) {
	ret := _m.Called(ctx, gasWanted)

	if len(ret) == 0 {
		panic("no return value specified for AddTransientGasWanted")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Context, uint64) (uint64, error)); ok {
		return rf(ctx, gasWanted)
	}
	if rf, ok := ret.Get(0).(func(types.Context, uint64) uint64); ok {
		r0 = rf(ctx, gasWanted)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(types.Context, uint64) error); ok {
		r1 = rf(ctx, gasWanted)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CalculateBaseFee provides a mock function with given fields: ctx
func (_m *FeeMarketKeeper) CalculateBaseFee(ctx types.Context) *big.Int {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CalculateBaseFee")
	}

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func(types.Context) *big.Int); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	return r0
}

// GetBaseFee provides a mock function with given fields: ctx
func (_m *FeeMarketKeeper) GetBaseFee(ctx types.Context) *big.Int {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetBaseFee")
	}

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func(types.Context) *big.Int); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	return r0
}

// GetParams provides a mock function with given fields: ctx
func (_m *FeeMarketKeeper) GetParams(ctx types.Context) feemarkettypes.Params {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetParams")
	}

	var r0 feemarkettypes.Params
	if rf, ok := ret.Get(0).(func(types.Context) feemarkettypes.Params); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(feemarkettypes.Params)
	}

	return r0
}

// NewFeeMarketKeeper creates a new instance of FeeMarketKeeper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFeeMarketKeeper(t interface {
	mock.TestingT
	Cleanup(func())
},
) *FeeMarketKeeper {
	mock := &FeeMarketKeeper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
