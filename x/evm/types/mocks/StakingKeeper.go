// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	stakingtypes "github.com/cosmos/cosmos-sdk/x/staking/types"
	mock "github.com/stretchr/testify/mock"

	types "github.com/cosmos/cosmos-sdk/types"
)

// StakingKeeper is an autogenerated mock type for the StakingKeeper type
type StakingKeeper struct {
	mock.Mock
}

// GetHistoricalInfo provides a mock function with given fields: ctx, height
func (_m *StakingKeeper) GetHistoricalInfo(ctx types.Context, height int64) (stakingtypes.HistoricalInfo, bool) {
	ret := _m.Called(ctx, height)

	if len(ret) == 0 {
		panic("no return value specified for GetHistoricalInfo")
	}

	var r0 stakingtypes.HistoricalInfo
	var r1 bool
	if rf, ok := ret.Get(0).(func(types.Context, int64) (stakingtypes.HistoricalInfo, bool)); ok {
		return rf(ctx, height)
	}
	if rf, ok := ret.Get(0).(func(types.Context, int64) stakingtypes.HistoricalInfo); ok {
		r0 = rf(ctx, height)
	} else {
		r0 = ret.Get(0).(stakingtypes.HistoricalInfo)
	}

	if rf, ok := ret.Get(1).(func(types.Context, int64) bool); ok {
		r1 = rf(ctx, height)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GetValidatorByConsAddr provides a mock function with given fields: ctx, consAddr
func (_m *StakingKeeper) GetValidatorByConsAddr(ctx types.Context, consAddr types.ConsAddress) (stakingtypes.Validator, bool) {
	ret := _m.Called(ctx, consAddr)

	if len(ret) == 0 {
		panic("no return value specified for GetValidatorByConsAddr")
	}

	var r0 stakingtypes.Validator
	var r1 bool
	if rf, ok := ret.Get(0).(func(types.Context, types.ConsAddress) (stakingtypes.Validator, bool)); ok {
		return rf(ctx, consAddr)
	}
	if rf, ok := ret.Get(0).(func(types.Context, types.ConsAddress) stakingtypes.Validator); ok {
		r0 = rf(ctx, consAddr)
	} else {
		r0 = ret.Get(0).(stakingtypes.Validator)
	}

	if rf, ok := ret.Get(1).(func(types.Context, types.ConsAddress) bool); ok {
		r1 = rf(ctx, consAddr)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// NewStakingKeeper creates a new instance of StakingKeeper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStakingKeeper(t interface {
	mock.TestingT
	Cleanup(func())
},
) *StakingKeeper {
	mock := &StakingKeeper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
