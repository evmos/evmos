// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	common "github.com/ethereum/go-ethereum/common"

	mock "github.com/stretchr/testify/mock"

	types "github.com/cosmos/cosmos-sdk/types"

	vm "github.com/ethereum/go-ethereum/core/vm"
)

// Erc20Keeper is an autogenerated mock type for the Erc20Keeper type
type Erc20Keeper struct {
	mock.Mock
}

// InstantiateERC20Precompile provides a mock function with given fields: ctx, contractAddr
func (_m *Erc20Keeper) InstantiateERC20Precompile(ctx types.Context, contractAddr common.Address) (vm.PrecompiledContract, error) {
	ret := _m.Called(ctx, contractAddr)

	if len(ret) == 0 {
		panic("no return value specified for InstantiateERC20Precompile")
	}

	var r0 vm.PrecompiledContract
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Context, common.Address) (vm.PrecompiledContract, error)); ok {
		return rf(ctx, contractAddr)
	}
	if rf, ok := ret.Get(0).(func(types.Context, common.Address) vm.PrecompiledContract); ok {
		r0 = rf(ctx, contractAddr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(vm.PrecompiledContract)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Context, common.Address) error); ok {
		r1 = rf(ctx, contractAddr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewErc20Keeper creates a new instance of Erc20Keeper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewErc20Keeper(t interface {
	mock.TestingT
	Cleanup(func())
},
) *Erc20Keeper {
	mock := &Erc20Keeper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
