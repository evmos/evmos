// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"

	types "github.com/evmos/evmos/v16/x/evm/types"
	mock "github.com/stretchr/testify/mock"
)

// MsgServer is an autogenerated mock type for the MsgServer type
type MsgServer struct {
	mock.Mock
}

// EthereumTx provides a mock function with given fields: _a0, _a1
func (_m *MsgServer) EthereumTx(_a0 context.Context, _a1 *types.MsgEthereumTx) (*types.MsgEthereumTxResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for EthereumTx")
	}

	var r0 *types.MsgEthereumTxResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.MsgEthereumTx) (*types.MsgEthereumTxResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.MsgEthereumTx) *types.MsgEthereumTxResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.MsgEthereumTxResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.MsgEthereumTx) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateParams provides a mock function with given fields: _a0, _a1
func (_m *MsgServer) UpdateParams(_a0 context.Context, _a1 *types.MsgUpdateParams) (*types.MsgUpdateParamsResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateParams")
	}

	var r0 *types.MsgUpdateParamsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.MsgUpdateParams) (*types.MsgUpdateParamsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.MsgUpdateParams) *types.MsgUpdateParamsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.MsgUpdateParamsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.MsgUpdateParams) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMsgServer creates a new instance of MsgServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMsgServer(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MsgServer {
	mock := &MsgServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
