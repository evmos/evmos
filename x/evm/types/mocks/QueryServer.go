// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"

	types "github.com/evmos/evmos/v18/x/evm/types"
	mock "github.com/stretchr/testify/mock"
)

// QueryServer is an autogenerated mock type for the QueryServer type
type QueryServer struct {
	mock.Mock
}

// Account provides a mock function with given fields: _a0, _a1
func (_m *QueryServer) Account(_a0 context.Context, _a1 *types.QueryAccountRequest) (*types.QueryAccountResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Account")
	}

	var r0 *types.QueryAccountResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryAccountRequest) (*types.QueryAccountResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryAccountRequest) *types.QueryAccountResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryAccountResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryAccountRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Balance provides a mock function with given fields: _a0, _a1
func (_m *QueryServer) Balance(_a0 context.Context, _a1 *types.QueryBalanceRequest) (*types.QueryBalanceResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Balance")
	}

	var r0 *types.QueryBalanceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryBalanceRequest) (*types.QueryBalanceResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryBalanceRequest) *types.QueryBalanceResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryBalanceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryBalanceRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BaseFee provides a mock function with given fields: _a0, _a1
func (_m *QueryServer) BaseFee(_a0 context.Context, _a1 *types.QueryBaseFeeRequest) (*types.QueryBaseFeeResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for BaseFee")
	}

	var r0 *types.QueryBaseFeeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryBaseFeeRequest) (*types.QueryBaseFeeResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryBaseFeeRequest) *types.QueryBaseFeeResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryBaseFeeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryBaseFeeRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Code provides a mock function with given fields: _a0, _a1
func (_m *QueryServer) Code(_a0 context.Context, _a1 *types.QueryCodeRequest) (*types.QueryCodeResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Code")
	}

	var r0 *types.QueryCodeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryCodeRequest) (*types.QueryCodeResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryCodeRequest) *types.QueryCodeResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryCodeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryCodeRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CosmosAccount provides a mock function with given fields: _a0, _a1
func (_m *QueryServer) CosmosAccount(_a0 context.Context, _a1 *types.QueryCosmosAccountRequest) (*types.QueryCosmosAccountResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CosmosAccount")
	}

	var r0 *types.QueryCosmosAccountResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryCosmosAccountRequest) (*types.QueryCosmosAccountResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryCosmosAccountRequest) *types.QueryCosmosAccountResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryCosmosAccountResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryCosmosAccountRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EstimateGas provides a mock function with given fields: _a0, _a1
func (_m *QueryServer) EstimateGas(_a0 context.Context, _a1 *types.EthCallRequest) (*types.EstimateGasResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for EstimateGas")
	}

	var r0 *types.EstimateGasResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.EthCallRequest) (*types.EstimateGasResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.EthCallRequest) *types.EstimateGasResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.EstimateGasResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.EthCallRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EthCall provides a mock function with given fields: _a0, _a1
func (_m *QueryServer) EthCall(_a0 context.Context, _a1 *types.EthCallRequest) (*types.MsgEthereumTxResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for EthCall")
	}

	var r0 *types.MsgEthereumTxResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.EthCallRequest) (*types.MsgEthereumTxResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.EthCallRequest) *types.MsgEthereumTxResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.MsgEthereumTxResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.EthCallRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Params provides a mock function with given fields: _a0, _a1
func (_m *QueryServer) Params(_a0 context.Context, _a1 *types.QueryParamsRequest) (*types.QueryParamsResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Params")
	}

	var r0 *types.QueryParamsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryParamsRequest) (*types.QueryParamsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryParamsRequest) *types.QueryParamsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryParamsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryParamsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Storage provides a mock function with given fields: _a0, _a1
func (_m *QueryServer) Storage(_a0 context.Context, _a1 *types.QueryStorageRequest) (*types.QueryStorageResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Storage")
	}

	var r0 *types.QueryStorageResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryStorageRequest) (*types.QueryStorageResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryStorageRequest) *types.QueryStorageResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryStorageResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryStorageRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TraceBlock provides a mock function with given fields: _a0, _a1
func (_m *QueryServer) TraceBlock(_a0 context.Context, _a1 *types.QueryTraceBlockRequest) (*types.QueryTraceBlockResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for TraceBlock")
	}

	var r0 *types.QueryTraceBlockResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryTraceBlockRequest) (*types.QueryTraceBlockResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryTraceBlockRequest) *types.QueryTraceBlockResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryTraceBlockResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryTraceBlockRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TraceTx provides a mock function with given fields: _a0, _a1
func (_m *QueryServer) TraceTx(_a0 context.Context, _a1 *types.QueryTraceTxRequest) (*types.QueryTraceTxResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for TraceTx")
	}

	var r0 *types.QueryTraceTxResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryTraceTxRequest) (*types.QueryTraceTxResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryTraceTxRequest) *types.QueryTraceTxResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryTraceTxResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryTraceTxRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidatorAccount provides a mock function with given fields: _a0, _a1
func (_m *QueryServer) ValidatorAccount(_a0 context.Context, _a1 *types.QueryValidatorAccountRequest) (*types.QueryValidatorAccountResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ValidatorAccount")
	}

	var r0 *types.QueryValidatorAccountResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryValidatorAccountRequest) (*types.QueryValidatorAccountResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryValidatorAccountRequest) *types.QueryValidatorAccountResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryValidatorAccountResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryValidatorAccountRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewQueryServer creates a new instance of QueryServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQueryServer(t interface {
	mock.TestingT
	Cleanup(func())
},
) *QueryServer {
	mock := &QueryServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
