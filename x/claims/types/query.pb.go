// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: canto/claims/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryTotalUnclaimedRequest is the request type for the Query/TotalUnclaimed
// RPC method.
type QueryTotalUnclaimedRequest struct {
}

func (m *QueryTotalUnclaimedRequest) Reset()         { *m = QueryTotalUnclaimedRequest{} }
func (m *QueryTotalUnclaimedRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTotalUnclaimedRequest) ProtoMessage()    {}
func (*QueryTotalUnclaimedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_04e378d146dd10ae, []int{0}
}
func (m *QueryTotalUnclaimedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalUnclaimedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalUnclaimedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalUnclaimedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalUnclaimedRequest.Merge(m, src)
}
func (m *QueryTotalUnclaimedRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalUnclaimedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalUnclaimedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalUnclaimedRequest proto.InternalMessageInfo

// QueryTotalUnclaimedResponse is the response type for the Query/TotalUnclaimed
// RPC method.
type QueryTotalUnclaimedResponse struct {
	// coins defines the unclaimed coins
	Coins github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=coins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"coins"`
}

func (m *QueryTotalUnclaimedResponse) Reset()         { *m = QueryTotalUnclaimedResponse{} }
func (m *QueryTotalUnclaimedResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTotalUnclaimedResponse) ProtoMessage()    {}
func (*QueryTotalUnclaimedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_04e378d146dd10ae, []int{1}
}
func (m *QueryTotalUnclaimedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalUnclaimedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalUnclaimedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalUnclaimedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalUnclaimedResponse.Merge(m, src)
}
func (m *QueryTotalUnclaimedResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalUnclaimedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalUnclaimedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalUnclaimedResponse proto.InternalMessageInfo

func (m *QueryTotalUnclaimedResponse) GetCoins() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Coins
	}
	return nil
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_04e378d146dd10ae, []int{2}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is the response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params defines the parameters of the module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_04e378d146dd10ae, []int{3}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryClaimsRecordsRequest is the request type for the Query/ClaimsRecords RPC
// method.
type QueryClaimsRecordsRequest struct {
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryClaimsRecordsRequest) Reset()         { *m = QueryClaimsRecordsRequest{} }
func (m *QueryClaimsRecordsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryClaimsRecordsRequest) ProtoMessage()    {}
func (*QueryClaimsRecordsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_04e378d146dd10ae, []int{4}
}
func (m *QueryClaimsRecordsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryClaimsRecordsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryClaimsRecordsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryClaimsRecordsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryClaimsRecordsRequest.Merge(m, src)
}
func (m *QueryClaimsRecordsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryClaimsRecordsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryClaimsRecordsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryClaimsRecordsRequest proto.InternalMessageInfo

func (m *QueryClaimsRecordsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryClaimsRecordsResponse is the response type for the Query/ClaimsRecords
// RPC method.
type QueryClaimsRecordsResponse struct {
	// claims defines all claims records
	Claims []ClaimsRecordAddress `protobuf:"bytes,1,rep,name=claims,proto3" json:"claims"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryClaimsRecordsResponse) Reset()         { *m = QueryClaimsRecordsResponse{} }
func (m *QueryClaimsRecordsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryClaimsRecordsResponse) ProtoMessage()    {}
func (*QueryClaimsRecordsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_04e378d146dd10ae, []int{5}
}
func (m *QueryClaimsRecordsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryClaimsRecordsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryClaimsRecordsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryClaimsRecordsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryClaimsRecordsResponse.Merge(m, src)
}
func (m *QueryClaimsRecordsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryClaimsRecordsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryClaimsRecordsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryClaimsRecordsResponse proto.InternalMessageInfo

func (m *QueryClaimsRecordsResponse) GetClaims() []ClaimsRecordAddress {
	if m != nil {
		return m.Claims
	}
	return nil
}

func (m *QueryClaimsRecordsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryClaimsRecordRequest is the request type for the Query/ClaimsRecord RPC
// method.
type QueryClaimsRecordRequest struct {
	// address defines the user to query claims record for
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryClaimsRecordRequest) Reset()         { *m = QueryClaimsRecordRequest{} }
func (m *QueryClaimsRecordRequest) String() string { return proto.CompactTextString(m) }
func (*QueryClaimsRecordRequest) ProtoMessage()    {}
func (*QueryClaimsRecordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_04e378d146dd10ae, []int{6}
}
func (m *QueryClaimsRecordRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryClaimsRecordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryClaimsRecordRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryClaimsRecordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryClaimsRecordRequest.Merge(m, src)
}
func (m *QueryClaimsRecordRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryClaimsRecordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryClaimsRecordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryClaimsRecordRequest proto.InternalMessageInfo

func (m *QueryClaimsRecordRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// QueryClaimsRecordResponse is the response type for the Query/ClaimsRecord RPC
// method.
type QueryClaimsRecordResponse struct {
	// total initial claimable amount for the user
	InitialClaimableAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=initial_claimable_amount,json=initialClaimableAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"initial_claimable_amount"`
	// the claims of the user
	Claims []Claim `protobuf:"bytes,2,rep,name=claims,proto3" json:"claims"`
}

func (m *QueryClaimsRecordResponse) Reset()         { *m = QueryClaimsRecordResponse{} }
func (m *QueryClaimsRecordResponse) String() string { return proto.CompactTextString(m) }
func (*QueryClaimsRecordResponse) ProtoMessage()    {}
func (*QueryClaimsRecordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_04e378d146dd10ae, []int{7}
}
func (m *QueryClaimsRecordResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryClaimsRecordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryClaimsRecordResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryClaimsRecordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryClaimsRecordResponse.Merge(m, src)
}
func (m *QueryClaimsRecordResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryClaimsRecordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryClaimsRecordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryClaimsRecordResponse proto.InternalMessageInfo

func (m *QueryClaimsRecordResponse) GetClaims() []Claim {
	if m != nil {
		return m.Claims
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryTotalUnclaimedRequest)(nil), "canto.claims.v1.QueryTotalUnclaimedRequest")
	proto.RegisterType((*QueryTotalUnclaimedResponse)(nil), "canto.claims.v1.QueryTotalUnclaimedResponse")
	proto.RegisterType((*QueryParamsRequest)(nil), "canto.claims.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "canto.claims.v1.QueryParamsResponse")
	proto.RegisterType((*QueryClaimsRecordsRequest)(nil), "canto.claims.v1.QueryClaimsRecordsRequest")
	proto.RegisterType((*QueryClaimsRecordsResponse)(nil), "canto.claims.v1.QueryClaimsRecordsResponse")
	proto.RegisterType((*QueryClaimsRecordRequest)(nil), "canto.claims.v1.QueryClaimsRecordRequest")
	proto.RegisterType((*QueryClaimsRecordResponse)(nil), "canto.claims.v1.QueryClaimsRecordResponse")
}

func init() { proto.RegisterFile("canto/claims/v1/query.proto", fileDescriptor_04e378d146dd10ae) }

var fileDescriptor_04e378d146dd10ae = []byte{
	// 676 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0xdf, 0x4e, 0x13, 0x41,
	0x14, 0xc6, 0x3b, 0x08, 0x35, 0x0e, 0xfe, 0x49, 0x46, 0x02, 0xa5, 0xe0, 0x16, 0x57, 0x02, 0x05,
	0x64, 0x87, 0x02, 0x3e, 0x00, 0x6d, 0xa2, 0xd1, 0x18, 0x83, 0x1b, 0xbd, 0xf1, 0xa6, 0x99, 0x6e,
	0x27, 0xcb, 0x86, 0x76, 0x66, 0xd9, 0x99, 0x56, 0x89, 0x31, 0x31, 0x3e, 0x81, 0xc6, 0x98, 0xf8,
	0x0a, 0xfa, 0x0a, 0xde, 0x7a, 0xc1, 0x25, 0x89, 0x37, 0xc6, 0x0b, 0x34, 0xe0, 0x83, 0x98, 0x9d,
	0x99, 0xad, 0xdd, 0x76, 0x95, 0x5e, 0x41, 0xf7, 0x7c, 0xe7, 0x3b, 0xbf, 0x73, 0xf6, 0x9c, 0x85,
	0x73, 0x1e, 0x61, 0x92, 0x63, 0xaf, 0x45, 0x82, 0xb6, 0xc0, 0xdd, 0x0a, 0x3e, 0xe8, 0xd0, 0xe8,
	0xd0, 0x09, 0x23, 0x2e, 0x39, 0xba, 0xa6, 0x82, 0x8e, 0x0e, 0x3a, 0xdd, 0x4a, 0x71, 0xca, 0xe7,
	0x3e, 0x57, 0x31, 0x1c, 0xff, 0xa7, 0x65, 0xc5, 0x79, 0x9f, 0x73, 0xbf, 0x45, 0x31, 0x09, 0x03,
	0x4c, 0x18, 0xe3, 0x92, 0xc8, 0x80, 0x33, 0x61, 0xa2, 0xab, 0x1e, 0x17, 0x6d, 0x2e, 0x70, 0x83,
	0x08, 0xaa, 0xdd, 0x71, 0xb7, 0xd2, 0xa0, 0x92, 0x54, 0x70, 0x48, 0xfc, 0x80, 0x29, 0xb1, 0xd1,
	0x5a, 0xfd, 0xda, 0x44, 0xe5, 0xf1, 0x20, 0x89, 0xcf, 0x0f, 0xd2, 0x1a, 0x34, 0x1d, 0xbd, 0x31,
	0x18, 0xf5, 0x29, 0xa3, 0x22, 0x30, 0x61, 0x7b, 0x1e, 0x16, 0x1f, 0xc7, 0xe5, 0x9f, 0x70, 0x49,
	0x5a, 0x4f, 0x99, 0x92, 0xd1, 0xa6, 0x4b, 0x0f, 0x3a, 0x54, 0x48, 0xfb, 0x35, 0x80, 0x73, 0x99,
	0x61, 0x11, 0x72, 0x26, 0x28, 0x22, 0x70, 0x22, 0x06, 0x11, 0x05, 0xb0, 0x70, 0xa1, 0x3c, 0xb9,
	0x39, 0xeb, 0x68, 0x54, 0x27, 0x46, 0x75, 0x0c, 0xaa, 0x53, 0xe3, 0x01, 0xab, 0x6e, 0x1c, 0x9d,
	0x94, 0x72, 0x9f, 0x7f, 0x96, 0xca, 0x7e, 0x20, 0xf7, 0x3a, 0x0d, 0xc7, 0xe3, 0x6d, 0x6c, 0xfa,
	0xd2, 0x7f, 0xd6, 0x45, 0x73, 0x1f, 0xcb, 0xc3, 0x90, 0x0a, 0x95, 0x20, 0x5c, 0xed, 0x6c, 0x4f,
	0x41, 0xa4, 0x08, 0x76, 0x49, 0x44, 0xda, 0x22, 0x01, 0x7b, 0x08, 0xaf, 0xa7, 0x9e, 0x1a, 0x9e,
	0x3b, 0x30, 0x1f, 0xaa, 0x27, 0x05, 0xb0, 0x00, 0xca, 0x93, 0x9b, 0x33, 0xce, 0xc0, 0xcb, 0x72,
	0x74, 0x42, 0x75, 0x3c, 0xc6, 0x71, 0x8d, 0xd8, 0xf6, 0xe0, 0xac, 0x72, 0xab, 0x29, 0x99, 0x4b,
	0x3d, 0x1e, 0x35, 0x93, 0x52, 0xe8, 0x2e, 0x84, 0x7f, 0x5f, 0x89, 0xf1, 0x5d, 0x4a, 0x35, 0xaa,
	0xb7, 0x23, 0x69, 0x77, 0x97, 0xf8, 0xd4, 0xe4, 0xba, 0x7d, 0x99, 0xf6, 0x27, 0x60, 0x46, 0x3d,
	0x50, 0xc5, 0xa0, 0x57, 0x61, 0x5e, 0x53, 0x9a, 0x59, 0x2e, 0x0e, 0xa1, 0xf7, 0xe7, 0xed, 0x34,
	0x9b, 0x11, 0x15, 0xbd, 0x3e, 0xb4, 0x08, 0xdd, 0x4b, 0xa1, 0x8e, 0x29, 0xd4, 0xe5, 0x73, 0x51,
	0x35, 0x40, 0x8a, 0x75, 0x1b, 0x16, 0x86, 0x50, 0x93, 0x79, 0x14, 0xe0, 0x45, 0xa2, 0xab, 0xab,
	0x61, 0x5c, 0x72, 0x93, 0x9f, 0xf6, 0x17, 0x90, 0x31, 0xc7, 0x5e, 0x83, 0x7b, 0xb0, 0x10, 0xb0,
	0x40, 0x06, 0xa4, 0x55, 0x57, 0xb8, 0xa4, 0xd1, 0xa2, 0x75, 0xd2, 0xe6, 0x1d, 0x26, 0xb5, 0x51,
	0xd5, 0x89, 0x9b, 0xf9, 0x71, 0x52, 0x5a, 0x1a, 0x61, 0x47, 0xee, 0x33, 0xe9, 0x4e, 0x1b, 0xbf,
	0x5a, 0x62, 0xb7, 0xa3, 0xdc, 0xd0, 0x76, 0x6f, 0x94, 0x63, 0x6a, 0x94, 0xd3, 0xd9, 0xa3, 0x4c,
	0x0f, 0x6f, 0xf3, 0xeb, 0x38, 0x9c, 0x50, 0xf4, 0xe8, 0x03, 0x80, 0x57, 0xd3, 0x0b, 0x8f, 0xd6,
	0x86, 0x2c, 0xfe, 0x7d, 0x35, 0xc5, 0xdb, 0xa3, 0x89, 0xf5, 0x5c, 0xec, 0xf2, 0x9b, 0x6f, 0xbf,
	0xdf, 0x8f, 0xd9, 0x68, 0x01, 0x0f, 0x5e, 0xaa, 0x8c, 0x13, 0xea, 0x9d, 0x1e, 0x84, 0x84, 0x79,
	0xbd, 0xbe, 0xe8, 0x56, 0x76, 0x85, 0xd4, 0x8d, 0x14, 0x17, 0xff, 0x2f, 0x32, 0xe5, 0x4b, 0xaa,
	0xfc, 0x2c, 0x9a, 0x19, 0x2a, 0xaf, 0x8f, 0x03, 0xbd, 0x03, 0xf0, 0x4a, 0x6a, 0x65, 0xd1, 0x6a,
	0xb6, 0x71, 0xd6, 0xf5, 0x14, 0xd7, 0x46, 0xd2, 0x1a, 0x96, 0x65, 0xc5, 0x72, 0x13, 0x95, 0x70,
	0xf6, 0x27, 0xad, 0x1e, 0x19, 0x82, 0x8f, 0x00, 0x5e, 0xee, 0xb7, 0x40, 0x2b, 0xe7, 0x97, 0x49,
	0x88, 0x56, 0x47, 0x91, 0x1a, 0xa0, 0x8a, 0x02, 0x5a, 0x43, 0x2b, 0xe7, 0x00, 0xe1, 0x97, 0xe6,
	0x06, 0x5e, 0x55, 0x1f, 0x1c, 0x9d, 0x5a, 0xe0, 0xf8, 0xd4, 0x02, 0xbf, 0x4e, 0x2d, 0xf0, 0xf6,
	0xcc, 0xca, 0x1d, 0x9f, 0x59, 0xb9, 0xef, 0x67, 0x56, 0xee, 0xd9, 0x46, 0xdf, 0x5a, 0xd7, 0x62,
	0xbb, 0xf5, 0x47, 0x54, 0x3e, 0xe7, 0xd1, 0xbe, 0x31, 0xef, 0x6e, 0xe1, 0x17, 0x49, 0x05, 0xb5,
	0xe4, 0x8d, 0xbc, 0xfa, 0x46, 0x6f, 0xfd, 0x09, 0x00, 0x00, 0xff, 0xff, 0x1b, 0x90, 0x2b, 0x6b,
	0x90, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// TotalUnclaimed queries the total unclaimed tokens from the airdrop
	TotalUnclaimed(ctx context.Context, in *QueryTotalUnclaimedRequest, opts ...grpc.CallOption) (*QueryTotalUnclaimedResponse, error)
	// Params returns the claims module parameters
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// ClaimsRecords returns all claims records
	ClaimsRecords(ctx context.Context, in *QueryClaimsRecordsRequest, opts ...grpc.CallOption) (*QueryClaimsRecordsResponse, error)
	// ClaimsRecord returns the claims record for a given address
	ClaimsRecord(ctx context.Context, in *QueryClaimsRecordRequest, opts ...grpc.CallOption) (*QueryClaimsRecordResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) TotalUnclaimed(ctx context.Context, in *QueryTotalUnclaimedRequest, opts ...grpc.CallOption) (*QueryTotalUnclaimedResponse, error) {
	out := new(QueryTotalUnclaimedResponse)
	err := c.cc.Invoke(ctx, "/canto.claims.v1.Query/TotalUnclaimed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/canto.claims.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ClaimsRecords(ctx context.Context, in *QueryClaimsRecordsRequest, opts ...grpc.CallOption) (*QueryClaimsRecordsResponse, error) {
	out := new(QueryClaimsRecordsResponse)
	err := c.cc.Invoke(ctx, "/canto.claims.v1.Query/ClaimsRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ClaimsRecord(ctx context.Context, in *QueryClaimsRecordRequest, opts ...grpc.CallOption) (*QueryClaimsRecordResponse, error) {
	out := new(QueryClaimsRecordResponse)
	err := c.cc.Invoke(ctx, "/canto.claims.v1.Query/ClaimsRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// TotalUnclaimed queries the total unclaimed tokens from the airdrop
	TotalUnclaimed(context.Context, *QueryTotalUnclaimedRequest) (*QueryTotalUnclaimedResponse, error)
	// Params returns the claims module parameters
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// ClaimsRecords returns all claims records
	ClaimsRecords(context.Context, *QueryClaimsRecordsRequest) (*QueryClaimsRecordsResponse, error)
	// ClaimsRecord returns the claims record for a given address
	ClaimsRecord(context.Context, *QueryClaimsRecordRequest) (*QueryClaimsRecordResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) TotalUnclaimed(ctx context.Context, req *QueryTotalUnclaimedRequest) (*QueryTotalUnclaimedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalUnclaimed not implemented")
}
func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) ClaimsRecords(ctx context.Context, req *QueryClaimsRecordsRequest) (*QueryClaimsRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimsRecords not implemented")
}
func (*UnimplementedQueryServer) ClaimsRecord(ctx context.Context, req *QueryClaimsRecordRequest) (*QueryClaimsRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimsRecord not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_TotalUnclaimed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTotalUnclaimedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TotalUnclaimed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canto.claims.v1.Query/TotalUnclaimed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TotalUnclaimed(ctx, req.(*QueryTotalUnclaimedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canto.claims.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ClaimsRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryClaimsRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ClaimsRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canto.claims.v1.Query/ClaimsRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ClaimsRecords(ctx, req.(*QueryClaimsRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ClaimsRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryClaimsRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ClaimsRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/canto.claims.v1.Query/ClaimsRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ClaimsRecord(ctx, req.(*QueryClaimsRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "canto.claims.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TotalUnclaimed",
			Handler:    _Query_TotalUnclaimed_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "ClaimsRecords",
			Handler:    _Query_ClaimsRecords_Handler,
		},
		{
			MethodName: "ClaimsRecord",
			Handler:    _Query_ClaimsRecord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "canto/claims/v1/query.proto",
}

func (m *QueryTotalUnclaimedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalUnclaimedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalUnclaimedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryTotalUnclaimedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalUnclaimedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalUnclaimedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Coins) > 0 {
		for iNdEx := len(m.Coins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryClaimsRecordsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryClaimsRecordsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryClaimsRecordsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryClaimsRecordsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryClaimsRecordsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryClaimsRecordsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Claims) > 0 {
		for iNdEx := len(m.Claims) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Claims[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryClaimsRecordRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryClaimsRecordRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryClaimsRecordRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryClaimsRecordResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryClaimsRecordResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryClaimsRecordResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Claims) > 0 {
		for iNdEx := len(m.Claims) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Claims[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size := m.InitialClaimableAmount.Size()
		i -= size
		if _, err := m.InitialClaimableAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryTotalUnclaimedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryTotalUnclaimedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Coins) > 0 {
		for _, e := range m.Coins {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryClaimsRecordsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryClaimsRecordsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Claims) > 0 {
		for _, e := range m.Claims {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryClaimsRecordRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryClaimsRecordResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.InitialClaimableAmount.Size()
	n += 1 + l + sovQuery(uint64(l))
	if len(m.Claims) > 0 {
		for _, e := range m.Claims {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryTotalUnclaimedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalUnclaimedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalUnclaimedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalUnclaimedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalUnclaimedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalUnclaimedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coins = append(m.Coins, types.Coin{})
			if err := m.Coins[len(m.Coins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryClaimsRecordsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryClaimsRecordsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryClaimsRecordsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryClaimsRecordsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryClaimsRecordsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryClaimsRecordsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Claims", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Claims = append(m.Claims, ClaimsRecordAddress{})
			if err := m.Claims[len(m.Claims)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryClaimsRecordRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryClaimsRecordRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryClaimsRecordRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryClaimsRecordResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryClaimsRecordResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryClaimsRecordResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialClaimableAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InitialClaimableAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Claims", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Claims = append(m.Claims, Claim{})
			if err := m.Claims[len(m.Claims)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
