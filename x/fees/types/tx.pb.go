// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: evmos/fees/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgRegisterFeesContract defines a message that registers a FeeContract.
type MsgRegisterFeeContract struct {
	// contract address
	Contract string `protobuf:"bytes,1,opt,name=contract,proto3" json:"contract,omitempty"`
	// deployment transaction hash
	DeploymentHash string `protobuf:"bytes,2,opt,name=deployment_hash,json=deploymentHash,proto3" json:"deployment_hash,omitempty"`
	// contract owner
	FromAddress string `protobuf:"bytes,3,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	// account receiving the fees
	WithdrawAddress string `protobuf:"bytes,4,opt,name=withdraw_address,json=withdrawAddress,proto3" json:"withdraw_address,omitempty"`
}

func (m *MsgRegisterFeeContract) Reset()         { *m = MsgRegisterFeeContract{} }
func (m *MsgRegisterFeeContract) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterFeeContract) ProtoMessage()    {}
func (*MsgRegisterFeeContract) Descriptor() ([]byte, []int) {
	return fileDescriptor_8839b3a6b237f9b6, []int{0}
}
func (m *MsgRegisterFeeContract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterFeeContract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterFeeContract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterFeeContract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterFeeContract.Merge(m, src)
}
func (m *MsgRegisterFeeContract) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterFeeContract) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterFeeContract.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterFeeContract proto.InternalMessageInfo

func (m *MsgRegisterFeeContract) GetContract() string {
	if m != nil {
		return m.Contract
	}
	return ""
}

func (m *MsgRegisterFeeContract) GetDeploymentHash() string {
	if m != nil {
		return m.DeploymentHash
	}
	return ""
}

func (m *MsgRegisterFeeContract) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

func (m *MsgRegisterFeeContract) GetWithdrawAddress() string {
	if m != nil {
		return m.WithdrawAddress
	}
	return ""
}

// MsgRegisterFeeContractResponse defines the MsgRegisterFeeContract response type.
type MsgRegisterFeeContractResponse struct {
}

func (m *MsgRegisterFeeContractResponse) Reset()         { *m = MsgRegisterFeeContractResponse{} }
func (m *MsgRegisterFeeContractResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterFeeContractResponse) ProtoMessage()    {}
func (*MsgRegisterFeeContractResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8839b3a6b237f9b6, []int{1}
}
func (m *MsgRegisterFeeContractResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterFeeContractResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterFeeContractResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterFeeContractResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterFeeContractResponse.Merge(m, src)
}
func (m *MsgRegisterFeeContractResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterFeeContractResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterFeeContractResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterFeeContractResponse proto.InternalMessageInfo

// CancelContractProposal is a Content type to cancel a contract fee
type MsgCancelFeeContract struct {
	Contract    string `protobuf:"bytes,1,opt,name=contract,proto3" json:"contract,omitempty"`
	FromAddress string `protobuf:"bytes,2,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
}

func (m *MsgCancelFeeContract) Reset()         { *m = MsgCancelFeeContract{} }
func (m *MsgCancelFeeContract) String() string { return proto.CompactTextString(m) }
func (*MsgCancelFeeContract) ProtoMessage()    {}
func (*MsgCancelFeeContract) Descriptor() ([]byte, []int) {
	return fileDescriptor_8839b3a6b237f9b6, []int{2}
}
func (m *MsgCancelFeeContract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelFeeContract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelFeeContract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelFeeContract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelFeeContract.Merge(m, src)
}
func (m *MsgCancelFeeContract) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelFeeContract) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelFeeContract.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelFeeContract proto.InternalMessageInfo

func (m *MsgCancelFeeContract) GetContract() string {
	if m != nil {
		return m.Contract
	}
	return ""
}

func (m *MsgCancelFeeContract) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

type MsgCancelFeeContractResponse struct {
}

func (m *MsgCancelFeeContractResponse) Reset()         { *m = MsgCancelFeeContractResponse{} }
func (m *MsgCancelFeeContractResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCancelFeeContractResponse) ProtoMessage()    {}
func (*MsgCancelFeeContractResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8839b3a6b237f9b6, []int{3}
}
func (m *MsgCancelFeeContractResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelFeeContractResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelFeeContractResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelFeeContractResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelFeeContractResponse.Merge(m, src)
}
func (m *MsgCancelFeeContractResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelFeeContractResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelFeeContractResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelFeeContractResponse proto.InternalMessageInfo

// UpdateContractProposal is a Content type to cancel a contract fee
type MsgUpdateFeeContract struct {
	Contract        string `protobuf:"bytes,1,opt,name=contract,proto3" json:"contract,omitempty"`
	FromAddress     string `protobuf:"bytes,2,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	WithdrawAddress string `protobuf:"bytes,3,opt,name=withdraw_address,json=withdrawAddress,proto3" json:"withdraw_address,omitempty"`
}

func (m *MsgUpdateFeeContract) Reset()         { *m = MsgUpdateFeeContract{} }
func (m *MsgUpdateFeeContract) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateFeeContract) ProtoMessage()    {}
func (*MsgUpdateFeeContract) Descriptor() ([]byte, []int) {
	return fileDescriptor_8839b3a6b237f9b6, []int{4}
}
func (m *MsgUpdateFeeContract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateFeeContract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateFeeContract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateFeeContract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateFeeContract.Merge(m, src)
}
func (m *MsgUpdateFeeContract) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateFeeContract) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateFeeContract.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateFeeContract proto.InternalMessageInfo

func (m *MsgUpdateFeeContract) GetContract() string {
	if m != nil {
		return m.Contract
	}
	return ""
}

func (m *MsgUpdateFeeContract) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

func (m *MsgUpdateFeeContract) GetWithdrawAddress() string {
	if m != nil {
		return m.WithdrawAddress
	}
	return ""
}

type MsgUpdateFeeContractResponse struct {
}

func (m *MsgUpdateFeeContractResponse) Reset()         { *m = MsgUpdateFeeContractResponse{} }
func (m *MsgUpdateFeeContractResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateFeeContractResponse) ProtoMessage()    {}
func (*MsgUpdateFeeContractResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8839b3a6b237f9b6, []int{5}
}
func (m *MsgUpdateFeeContractResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateFeeContractResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateFeeContractResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateFeeContractResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateFeeContractResponse.Merge(m, src)
}
func (m *MsgUpdateFeeContractResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateFeeContractResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateFeeContractResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateFeeContractResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgRegisterFeeContract)(nil), "evmos.fees.v1.MsgRegisterFeeContract")
	proto.RegisterType((*MsgRegisterFeeContractResponse)(nil), "evmos.fees.v1.MsgRegisterFeeContractResponse")
	proto.RegisterType((*MsgCancelFeeContract)(nil), "evmos.fees.v1.MsgCancelFeeContract")
	proto.RegisterType((*MsgCancelFeeContractResponse)(nil), "evmos.fees.v1.MsgCancelFeeContractResponse")
	proto.RegisterType((*MsgUpdateFeeContract)(nil), "evmos.fees.v1.MsgUpdateFeeContract")
	proto.RegisterType((*MsgUpdateFeeContractResponse)(nil), "evmos.fees.v1.MsgUpdateFeeContractResponse")
}

func init() { proto.RegisterFile("evmos/fees/v1/tx.proto", fileDescriptor_8839b3a6b237f9b6) }

var fileDescriptor_8839b3a6b237f9b6 = []byte{
	// 477 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0xbf, 0x6e, 0x13, 0x41,
	0x10, 0xc6, 0xbd, 0x76, 0x84, 0x60, 0xf9, 0x13, 0x38, 0xa2, 0xc8, 0x3a, 0x45, 0x9b, 0x60, 0x14,
	0x39, 0x11, 0xca, 0xad, 0x42, 0x3a, 0x3a, 0x12, 0x09, 0xd1, 0xb8, 0xb1, 0x44, 0x03, 0x85, 0xb5,
	0xbe, 0x1b, 0xef, 0x9d, 0xe4, 0xbb, 0x3d, 0xed, 0xac, 0x9d, 0xa4, 0xa5, 0xa0, 0x46, 0x82, 0x92,
	0x82, 0x57, 0xe0, 0x2d, 0x28, 0x23, 0x68, 0x28, 0x91, 0x4d, 0xc1, 0x63, 0x20, 0xef, 0x5d, 0x0e,
	0x25, 0x7b, 0x58, 0x2e, 0xe8, 0x66, 0x3f, 0x7d, 0x33, 0xf3, 0xbb, 0x99, 0xd1, 0xd1, 0x4d, 0x98,
	0xa6, 0x0a, 0xf9, 0x08, 0x00, 0xf9, 0xf4, 0x90, 0x9b, 0xb3, 0x20, 0xd7, 0xca, 0x28, 0xef, 0xae,
	0xd5, 0x83, 0x85, 0x1e, 0x4c, 0x0f, 0xfd, 0x2d, 0xa9, 0x94, 0x1c, 0x03, 0x17, 0x79, 0xc2, 0x45,
	0x96, 0x29, 0x23, 0x4c, 0xa2, 0x32, 0x2c, 0xcc, 0xfe, 0x86, 0x54, 0x52, 0xd9, 0x90, 0x2f, 0xa2,
	0x52, 0xdd, 0x2e, 0x73, 0xec, 0x6b, 0x38, 0x19, 0x71, 0x93, 0xa4, 0x80, 0x46, 0xa4, 0x79, 0x61,
	0xe8, 0x7c, 0x21, 0x74, 0xb3, 0x87, 0xb2, 0x0f, 0x32, 0x41, 0x03, 0xfa, 0x05, 0xc0, 0x89, 0xca,
	0x8c, 0x16, 0xa1, 0xf1, 0x7c, 0x7a, 0x33, 0x2c, 0xe3, 0x36, 0xd9, 0x21, 0x7b, 0xb7, 0xfa, 0xd5,
	0xdb, 0xeb, 0xd2, 0xf5, 0x08, 0xf2, 0xb1, 0x3a, 0x4f, 0x21, 0x33, 0x83, 0x58, 0x60, 0xdc, 0x6e,
	0x5a, 0xcb, 0xbd, 0xbf, 0xf2, 0x4b, 0x81, 0xb1, 0xf7, 0x88, 0xde, 0x19, 0x69, 0x95, 0x0e, 0x44,
	0x14, 0x69, 0x40, 0x6c, 0xb7, 0xac, 0xeb, 0xf6, 0x42, 0x7b, 0x5e, 0x48, 0xde, 0x3e, 0xbd, 0x7f,
	0x9a, 0x98, 0x38, 0xd2, 0xe2, 0xb4, 0xb2, 0xad, 0x59, 0xdb, 0xfa, 0xa5, 0x5e, 0x5a, 0x9f, 0xad,
	0xfd, 0xfe, 0xbc, 0xdd, 0xe8, 0xec, 0x50, 0x56, 0x8f, 0xdc, 0x07, 0xcc, 0x55, 0x86, 0xd0, 0x79,
	0x43, 0x37, 0x7a, 0x28, 0x4f, 0x44, 0x16, 0xc2, 0x78, 0xd5, 0x4f, 0xba, 0x4e, 0xda, 0x74, 0x48,
	0xcb, 0xf6, 0x8c, 0x6e, 0xd5, 0x15, 0xaf, 0x9a, 0xbf, 0x23, 0xb6, 0xfb, 0xab, 0x3c, 0x12, 0x06,
	0xfe, 0x5f, 0xf7, 0xda, 0x39, 0xb5, 0x96, 0xcd, 0xa9, 0x00, 0x75, 0x38, 0x2e, 0x41, 0x9f, 0x7e,
	0x6b, 0xd1, 0x56, 0x0f, 0xa5, 0xf7, 0x89, 0xd0, 0x87, 0x75, 0x07, 0xb0, 0x1b, 0x5c, 0x39, 0xc0,
	0xa0, 0x7e, 0xe8, 0xfe, 0xc1, 0x4a, 0xb6, 0x6a, 0x3c, 0xfc, 0xed, 0xf7, 0x5f, 0x1f, 0x9a, 0xfb,
	0x5e, 0x97, 0x5f, 0x3f, 0x7b, 0xae, 0xcb, 0xb4, 0xc1, 0x08, 0x60, 0x50, 0x8d, 0xe6, 0x23, 0xa1,
	0x0f, 0xdc, 0x55, 0x3e, 0x76, 0xbb, 0x3a, 0x26, 0xff, 0xc9, 0x0a, 0xa6, 0x0a, 0xec, 0xc0, 0x82,
	0x75, 0xbd, 0x5d, 0x17, 0x2c, 0xb4, 0x49, 0x2e, 0x96, 0xbb, 0xe3, 0x1a, 0x2c, 0xc7, 0x54, 0x87,
	0xf5, 0xcf, 0x2d, 0x2d, 0xc3, 0x9a, 0xd8, 0xa4, 0x2b, 0x58, 0xc7, 0xc7, 0x5f, 0x67, 0x8c, 0x5c,
	0xcc, 0x18, 0xf9, 0x39, 0x63, 0xe4, 0xfd, 0x9c, 0x35, 0x2e, 0xe6, 0xac, 0xf1, 0x63, 0xce, 0x1a,
	0xaf, 0xf7, 0x64, 0x62, 0xe2, 0xc9, 0x30, 0x08, 0x55, 0xca, 0x4d, 0x2c, 0x34, 0x26, 0x58, 0x96,
	0x9c, 0x1e, 0xf1, 0xb3, 0xa2, 0xae, 0x39, 0xcf, 0x01, 0x87, 0x37, 0xec, 0xbf, 0xe1, 0xe8, 0x4f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xa9, 0x12, 0xfc, 0xd5, 0x99, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// RegisterFeeContract
	RegisterFeeContract(ctx context.Context, in *MsgRegisterFeeContract, opts ...grpc.CallOption) (*MsgRegisterFeeContractResponse, error)
	// CancelFeeContract
	CancelFeeContract(ctx context.Context, in *MsgCancelFeeContract, opts ...grpc.CallOption) (*MsgCancelFeeContractResponse, error)
	// UpdateFeeContract
	UpdateFeeContract(ctx context.Context, in *MsgUpdateFeeContract, opts ...grpc.CallOption) (*MsgUpdateFeeContractResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) RegisterFeeContract(ctx context.Context, in *MsgRegisterFeeContract, opts ...grpc.CallOption) (*MsgRegisterFeeContractResponse, error) {
	out := new(MsgRegisterFeeContractResponse)
	err := c.cc.Invoke(ctx, "/evmos.fees.v1.Msg/RegisterFeeContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CancelFeeContract(ctx context.Context, in *MsgCancelFeeContract, opts ...grpc.CallOption) (*MsgCancelFeeContractResponse, error) {
	out := new(MsgCancelFeeContractResponse)
	err := c.cc.Invoke(ctx, "/evmos.fees.v1.Msg/CancelFeeContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateFeeContract(ctx context.Context, in *MsgUpdateFeeContract, opts ...grpc.CallOption) (*MsgUpdateFeeContractResponse, error) {
	out := new(MsgUpdateFeeContractResponse)
	err := c.cc.Invoke(ctx, "/evmos.fees.v1.Msg/UpdateFeeContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// RegisterFeeContract
	RegisterFeeContract(context.Context, *MsgRegisterFeeContract) (*MsgRegisterFeeContractResponse, error)
	// CancelFeeContract
	CancelFeeContract(context.Context, *MsgCancelFeeContract) (*MsgCancelFeeContractResponse, error)
	// UpdateFeeContract
	UpdateFeeContract(context.Context, *MsgUpdateFeeContract) (*MsgUpdateFeeContractResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) RegisterFeeContract(ctx context.Context, req *MsgRegisterFeeContract) (*MsgRegisterFeeContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterFeeContract not implemented")
}
func (*UnimplementedMsgServer) CancelFeeContract(ctx context.Context, req *MsgCancelFeeContract) (*MsgCancelFeeContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelFeeContract not implemented")
}
func (*UnimplementedMsgServer) UpdateFeeContract(ctx context.Context, req *MsgUpdateFeeContract) (*MsgUpdateFeeContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFeeContract not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_RegisterFeeContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterFeeContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterFeeContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evmos.fees.v1.Msg/RegisterFeeContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterFeeContract(ctx, req.(*MsgRegisterFeeContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CancelFeeContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCancelFeeContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CancelFeeContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evmos.fees.v1.Msg/CancelFeeContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CancelFeeContract(ctx, req.(*MsgCancelFeeContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateFeeContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateFeeContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateFeeContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evmos.fees.v1.Msg/UpdateFeeContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateFeeContract(ctx, req.(*MsgUpdateFeeContract))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "evmos.fees.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterFeeContract",
			Handler:    _Msg_RegisterFeeContract_Handler,
		},
		{
			MethodName: "CancelFeeContract",
			Handler:    _Msg_CancelFeeContract_Handler,
		},
		{
			MethodName: "UpdateFeeContract",
			Handler:    _Msg_UpdateFeeContract_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "evmos/fees/v1/tx.proto",
}

func (m *MsgRegisterFeeContract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterFeeContract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterFeeContract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WithdrawAddress) > 0 {
		i -= len(m.WithdrawAddress)
		copy(dAtA[i:], m.WithdrawAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.WithdrawAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DeploymentHash) > 0 {
		i -= len(m.DeploymentHash)
		copy(dAtA[i:], m.DeploymentHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DeploymentHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Contract) > 0 {
		i -= len(m.Contract)
		copy(dAtA[i:], m.Contract)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Contract)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterFeeContractResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterFeeContractResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterFeeContractResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCancelFeeContract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelFeeContract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelFeeContract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Contract) > 0 {
		i -= len(m.Contract)
		copy(dAtA[i:], m.Contract)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Contract)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCancelFeeContractResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelFeeContractResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelFeeContractResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateFeeContract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateFeeContract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateFeeContract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WithdrawAddress) > 0 {
		i -= len(m.WithdrawAddress)
		copy(dAtA[i:], m.WithdrawAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.WithdrawAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Contract) > 0 {
		i -= len(m.Contract)
		copy(dAtA[i:], m.Contract)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Contract)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateFeeContractResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateFeeContractResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateFeeContractResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgRegisterFeeContract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Contract)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DeploymentHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.WithdrawAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRegisterFeeContractResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCancelFeeContract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Contract)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCancelFeeContractResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateFeeContract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Contract)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.WithdrawAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateFeeContractResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgRegisterFeeContract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterFeeContract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterFeeContract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeploymentHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeploymentHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithdrawAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterFeeContractResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterFeeContractResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterFeeContractResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelFeeContract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelFeeContract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelFeeContract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelFeeContractResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelFeeContractResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelFeeContractResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateFeeContract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateFeeContract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateFeeContract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithdrawAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateFeeContractResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateFeeContractResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateFeeContractResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
