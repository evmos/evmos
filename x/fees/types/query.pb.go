// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: evmos/fees/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryDevFeeInfosRequest is the request type for the Query/DevFeeInfos RPC
// method.
type QueryDevFeeInfosRequest struct {
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryDevFeeInfosRequest) Reset()         { *m = QueryDevFeeInfosRequest{} }
func (m *QueryDevFeeInfosRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDevFeeInfosRequest) ProtoMessage()    {}
func (*QueryDevFeeInfosRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6533658f63002c05, []int{0}
}
func (m *QueryDevFeeInfosRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDevFeeInfosRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDevFeeInfosRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDevFeeInfosRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDevFeeInfosRequest.Merge(m, src)
}
func (m *QueryDevFeeInfosRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDevFeeInfosRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDevFeeInfosRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDevFeeInfosRequest proto.InternalMessageInfo

func (m *QueryDevFeeInfosRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryDevFeeInfosResponse is the response type for the Query/DevFeeInfos
// RPC method.
type QueryDevFeeInfosResponse struct {
	Fees []DevFeeInfo `protobuf:"bytes,1,rep,name=fees,proto3" json:"fees"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryDevFeeInfosResponse) Reset()         { *m = QueryDevFeeInfosResponse{} }
func (m *QueryDevFeeInfosResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDevFeeInfosResponse) ProtoMessage()    {}
func (*QueryDevFeeInfosResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6533658f63002c05, []int{1}
}
func (m *QueryDevFeeInfosResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDevFeeInfosResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDevFeeInfosResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDevFeeInfosResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDevFeeInfosResponse.Merge(m, src)
}
func (m *QueryDevFeeInfosResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDevFeeInfosResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDevFeeInfosResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDevFeeInfosResponse proto.InternalMessageInfo

func (m *QueryDevFeeInfosResponse) GetFees() []DevFeeInfo {
	if m != nil {
		return m.Fees
	}
	return nil
}

func (m *QueryDevFeeInfosResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryDevFeeInfoRequest is the request type for the Query/DevFeeInfo RPC
// method.
type QueryDevFeeInfoRequest struct {
	// contract identifier is the hex contract address of a contract
	ContractAddress string `protobuf:"bytes,1,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
}

func (m *QueryDevFeeInfoRequest) Reset()         { *m = QueryDevFeeInfoRequest{} }
func (m *QueryDevFeeInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDevFeeInfoRequest) ProtoMessage()    {}
func (*QueryDevFeeInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6533658f63002c05, []int{2}
}
func (m *QueryDevFeeInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDevFeeInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDevFeeInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDevFeeInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDevFeeInfoRequest.Merge(m, src)
}
func (m *QueryDevFeeInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDevFeeInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDevFeeInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDevFeeInfoRequest proto.InternalMessageInfo

func (m *QueryDevFeeInfoRequest) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

// QueryDevFeeInfoResponse is the response type for the Query/DevFeeInfo RPC
// method.
type QueryDevFeeInfoResponse struct {
	Fee DevFeeInfo `protobuf:"bytes,1,opt,name=fee,proto3" json:"fee"`
}

func (m *QueryDevFeeInfoResponse) Reset()         { *m = QueryDevFeeInfoResponse{} }
func (m *QueryDevFeeInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDevFeeInfoResponse) ProtoMessage()    {}
func (*QueryDevFeeInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6533658f63002c05, []int{3}
}
func (m *QueryDevFeeInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDevFeeInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDevFeeInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDevFeeInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDevFeeInfoResponse.Merge(m, src)
}
func (m *QueryDevFeeInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDevFeeInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDevFeeInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDevFeeInfoResponse proto.InternalMessageInfo

func (m *QueryDevFeeInfoResponse) GetFee() DevFeeInfo {
	if m != nil {
		return m.Fee
	}
	return DevFeeInfo{}
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6533658f63002c05, []int{4}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is the response type for the Query/Params RPC
// method.
type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6533658f63002c05, []int{5}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryDevFeeInfosPerDeployerRequest is the request type for the
// Query/DevFeeInfosPerDeployer RPC method.
type QueryDevFeeInfosPerDeployerRequest struct {
	// deployer bech32 address
	DeployerAddress string `protobuf:"bytes,1,opt,name=deployer_address,json=deployerAddress,proto3" json:"deployer_address,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryDevFeeInfosPerDeployerRequest) Reset()         { *m = QueryDevFeeInfosPerDeployerRequest{} }
func (m *QueryDevFeeInfosPerDeployerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDevFeeInfosPerDeployerRequest) ProtoMessage()    {}
func (*QueryDevFeeInfosPerDeployerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6533658f63002c05, []int{6}
}
func (m *QueryDevFeeInfosPerDeployerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDevFeeInfosPerDeployerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDevFeeInfosPerDeployerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDevFeeInfosPerDeployerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDevFeeInfosPerDeployerRequest.Merge(m, src)
}
func (m *QueryDevFeeInfosPerDeployerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDevFeeInfosPerDeployerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDevFeeInfosPerDeployerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDevFeeInfosPerDeployerRequest proto.InternalMessageInfo

func (m *QueryDevFeeInfosPerDeployerRequest) GetDeployerAddress() string {
	if m != nil {
		return m.DeployerAddress
	}
	return ""
}

func (m *QueryDevFeeInfosPerDeployerRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryDevFeeInfosPerDeployerResponse is the response type for the
// Query/DevFeeInfosPerDeployer RPC method.
type QueryDevFeeInfosPerDeployerResponse struct {
	Fees []DevFeeInfo `protobuf:"bytes,1,rep,name=fees,proto3" json:"fees"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryDevFeeInfosPerDeployerResponse) Reset()         { *m = QueryDevFeeInfosPerDeployerResponse{} }
func (m *QueryDevFeeInfosPerDeployerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDevFeeInfosPerDeployerResponse) ProtoMessage()    {}
func (*QueryDevFeeInfosPerDeployerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6533658f63002c05, []int{7}
}
func (m *QueryDevFeeInfosPerDeployerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDevFeeInfosPerDeployerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDevFeeInfosPerDeployerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDevFeeInfosPerDeployerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDevFeeInfosPerDeployerResponse.Merge(m, src)
}
func (m *QueryDevFeeInfosPerDeployerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDevFeeInfosPerDeployerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDevFeeInfosPerDeployerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDevFeeInfosPerDeployerResponse proto.InternalMessageInfo

func (m *QueryDevFeeInfosPerDeployerResponse) GetFees() []DevFeeInfo {
	if m != nil {
		return m.Fees
	}
	return nil
}

func (m *QueryDevFeeInfosPerDeployerResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryDevFeeInfosRequest)(nil), "evmos.fees.v1.QueryDevFeeInfosRequest")
	proto.RegisterType((*QueryDevFeeInfosResponse)(nil), "evmos.fees.v1.QueryDevFeeInfosResponse")
	proto.RegisterType((*QueryDevFeeInfoRequest)(nil), "evmos.fees.v1.QueryDevFeeInfoRequest")
	proto.RegisterType((*QueryDevFeeInfoResponse)(nil), "evmos.fees.v1.QueryDevFeeInfoResponse")
	proto.RegisterType((*QueryParamsRequest)(nil), "evmos.fees.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "evmos.fees.v1.QueryParamsResponse")
	proto.RegisterType((*QueryDevFeeInfosPerDeployerRequest)(nil), "evmos.fees.v1.QueryDevFeeInfosPerDeployerRequest")
	proto.RegisterType((*QueryDevFeeInfosPerDeployerResponse)(nil), "evmos.fees.v1.QueryDevFeeInfosPerDeployerResponse")
}

func init() { proto.RegisterFile("evmos/fees/v1/query.proto", fileDescriptor_6533658f63002c05) }

var fileDescriptor_6533658f63002c05 = []byte{
	// 584 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x54, 0xc1, 0x6e, 0xd3, 0x4c,
	0x10, 0x8e, 0xd3, 0xfc, 0x91, 0xfe, 0x8d, 0x10, 0x68, 0xdb, 0xb4, 0x69, 0x0a, 0xa6, 0x18, 0x91,
	0x06, 0x0e, 0xbb, 0x72, 0xf2, 0x04, 0x84, 0xaa, 0x08, 0xc4, 0x21, 0xe4, 0xc8, 0x05, 0x6d, 0x92,
	0x89, 0x6b, 0xa9, 0xf1, 0xba, 0x5e, 0xc7, 0x22, 0xaa, 0x7a, 0xe1, 0xca, 0x05, 0x89, 0x03, 0xdc,
	0x79, 0x00, 0x2e, 0x3c, 0x44, 0x8f, 0x95, 0xb8, 0x70, 0x42, 0x28, 0xe1, 0x41, 0x90, 0x77, 0xd7,
	0x4d, 0xec, 0x84, 0x04, 0x38, 0x71, 0xb3, 0x66, 0xbe, 0x99, 0xef, 0x9b, 0x6f, 0x67, 0x8c, 0x76,
	0x21, 0x1a, 0x72, 0x41, 0x07, 0x00, 0x82, 0x46, 0x36, 0x3d, 0x1d, 0x41, 0x30, 0x26, 0x7e, 0xc0,
	0x43, 0x8e, 0xaf, 0xc9, 0x14, 0x89, 0x53, 0x24, 0xb2, 0xab, 0x0f, 0x7a, 0x5c, 0xc4, 0xd0, 0x2e,
	0x13, 0xa0, 0x70, 0x34, 0xb2, 0xbb, 0x10, 0x32, 0x9b, 0xfa, 0xcc, 0x71, 0x3d, 0x16, 0xba, 0xdc,
	0x53, 0xa5, 0xd5, 0xbd, 0x74, 0x57, 0x07, 0x3c, 0x10, 0xae, 0xd0, 0xc9, 0x4a, 0x3a, 0x29, 0xfb,
	0xab, 0xcc, 0x4d, 0x87, 0x73, 0xe7, 0x04, 0x28, 0xf3, 0x5d, 0xca, 0x3c, 0x8f, 0x87, 0xb2, 0x67,
	0x92, 0xdd, 0x72, 0xb8, 0xc3, 0xe5, 0x27, 0x8d, 0xbf, 0x54, 0xd4, 0x62, 0x68, 0xe7, 0x79, 0x2c,
	0xe6, 0x10, 0xa2, 0x23, 0x80, 0x27, 0xde, 0x80, 0x8b, 0x0e, 0x9c, 0x8e, 0x40, 0x84, 0xf8, 0x08,
	0xa1, 0x99, 0xb2, 0x8a, 0xb1, 0x6f, 0xd4, 0x4b, 0x8d, 0x1a, 0x51, 0x63, 0x90, 0x78, 0x0c, 0xa2,
	0xc6, 0xd5, 0x63, 0x90, 0x36, 0x73, 0x40, 0xd7, 0x76, 0xe6, 0x2a, 0xad, 0x0f, 0x06, 0xaa, 0x2c,
	0x72, 0x08, 0x9f, 0x7b, 0x02, 0x70, 0x13, 0x15, 0xe2, 0x09, 0x2a, 0xc6, 0xfe, 0x46, 0xbd, 0xd4,
	0xd8, 0x25, 0x29, 0xd3, 0xc8, 0xac, 0xa2, 0x55, 0xb8, 0xf8, 0x76, 0x3b, 0xd7, 0x91, 0x60, 0xfc,
	0x38, 0xa5, 0x2c, 0x2f, 0x95, 0x1d, 0xac, 0x55, 0xa6, 0x18, 0x53, 0xd2, 0x1e, 0xa1, 0xed, 0x8c,
	0xb2, 0x64, 0xf8, 0xfb, 0xe8, 0x46, 0x8f, 0x7b, 0x61, 0xc0, 0x7a, 0xe1, 0x4b, 0xd6, 0xef, 0x07,
	0x20, 0x84, 0xb4, 0xe0, 0xff, 0xce, 0xf5, 0x24, 0xfe, 0x50, 0x85, 0xad, 0x67, 0x0b, 0x16, 0x5e,
	0x4d, 0x67, 0xa3, 0x8d, 0x01, 0x80, 0xf6, 0x6e, 0xed, 0x70, 0x31, 0xd6, 0xda, 0x42, 0x58, 0x76,
	0x6b, 0xb3, 0x80, 0x0d, 0x93, 0xb7, 0xb0, 0x9e, 0xa2, 0xcd, 0x54, 0xf4, 0xca, 0xbd, 0xa2, 0x2f,
	0x23, 0x9a, 0xa2, 0x9c, 0xa1, 0x50, 0x70, 0xdd, 0x5e, 0x43, 0xad, 0xf7, 0x06, 0xb2, 0xb2, 0xef,
	0xd1, 0x86, 0xe0, 0x10, 0xfc, 0x13, 0x3e, 0x86, 0x60, 0xce, 0x81, 0xbe, 0x0e, 0x65, 0x1d, 0x48,
	0xe2, 0xda, 0x81, 0xcc, 0xa6, 0xe4, 0xff, 0x7a, 0x53, 0x3e, 0x1a, 0xe8, 0xee, 0x4a, 0x65, 0xff,
	0xc2, 0xd2, 0x34, 0x3e, 0x17, 0xd0, 0x7f, 0x52, 0x25, 0x3e, 0x43, 0xa5, 0x39, 0xa5, 0xb8, 0x96,
	0x11, 0xf2, 0x8b, 0xc3, 0xaa, 0x1e, 0xac, 0xc5, 0x29, 0x56, 0x6b, 0xef, 0xf5, 0x97, 0x1f, 0xef,
	0xf2, 0x65, 0xbc, 0x49, 0x17, 0x6f, 0x1e, 0xbf, 0x31, 0x10, 0x9a, 0x15, 0xe1, 0x7b, 0xab, 0x9b,
	0x26, 0xdc, 0xb5, 0x75, 0x30, 0x4d, 0x4d, 0x24, 0x75, 0x1d, 0xd7, 0x96, 0x50, 0xd3, 0xb3, 0xec,
	0x69, 0x9c, 0x63, 0x0f, 0x15, 0xd5, 0xb2, 0xe1, 0x3b, 0xcb, 0x18, 0x52, 0xdb, 0x5c, 0xb5, 0x56,
	0x41, 0xb4, 0x80, 0x5b, 0x52, 0xc0, 0x0e, 0x2e, 0x67, 0x04, 0xa8, 0x25, 0xc6, 0x9f, 0x0c, 0xb4,
	0xbd, 0x7c, 0x4b, 0xb0, 0xbd, 0xc6, 0xde, 0xc5, 0x5d, 0xaf, 0x36, 0xfe, 0xa4, 0xe4, 0xb7, 0x1c,
	0xca, 0x9e, 0xce, 0x79, 0xab, 0x75, 0x31, 0x31, 0x8d, 0xcb, 0x89, 0x69, 0x7c, 0x9f, 0x98, 0xc6,
	0xdb, 0xa9, 0x99, 0xbb, 0x9c, 0x9a, 0xb9, 0xaf, 0x53, 0x33, 0xf7, 0xa2, 0xee, 0xb8, 0xe1, 0xf1,
	0xa8, 0x4b, 0x7a, 0x7c, 0x48, 0xc3, 0x63, 0x16, 0x08, 0x57, 0xe8, 0x9e, 0x51, 0x93, 0xbe, 0x52,
	0x0d, 0xc3, 0xb1, 0x0f, 0xa2, 0x5b, 0x94, 0x3f, 0xed, 0xe6, 0xcf, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x6d, 0x0d, 0x0b, 0xa6, 0x77, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// DevFeeInfos retrieves all registered contracts for fee distribution
	DevFeeInfos(ctx context.Context, in *QueryDevFeeInfosRequest, opts ...grpc.CallOption) (*QueryDevFeeInfosResponse, error)
	// DevFeeInfo retrieves a registered contract for fee distribution
	DevFeeInfo(ctx context.Context, in *QueryDevFeeInfoRequest, opts ...grpc.CallOption) (*QueryDevFeeInfoResponse, error)
	// Params retrieves the fees module params
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// DevFeeInfosPerDeployer retrieves all contracts that a deployer has
	// registered for fee distribution
	DevFeeInfosPerDeployer(ctx context.Context, in *QueryDevFeeInfosPerDeployerRequest, opts ...grpc.CallOption) (*QueryDevFeeInfosPerDeployerResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) DevFeeInfos(ctx context.Context, in *QueryDevFeeInfosRequest, opts ...grpc.CallOption) (*QueryDevFeeInfosResponse, error) {
	out := new(QueryDevFeeInfosResponse)
	err := c.cc.Invoke(ctx, "/evmos.fees.v1.Query/DevFeeInfos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DevFeeInfo(ctx context.Context, in *QueryDevFeeInfoRequest, opts ...grpc.CallOption) (*QueryDevFeeInfoResponse, error) {
	out := new(QueryDevFeeInfoResponse)
	err := c.cc.Invoke(ctx, "/evmos.fees.v1.Query/DevFeeInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/evmos.fees.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DevFeeInfosPerDeployer(ctx context.Context, in *QueryDevFeeInfosPerDeployerRequest, opts ...grpc.CallOption) (*QueryDevFeeInfosPerDeployerResponse, error) {
	out := new(QueryDevFeeInfosPerDeployerResponse)
	err := c.cc.Invoke(ctx, "/evmos.fees.v1.Query/DevFeeInfosPerDeployer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// DevFeeInfos retrieves all registered contracts for fee distribution
	DevFeeInfos(context.Context, *QueryDevFeeInfosRequest) (*QueryDevFeeInfosResponse, error)
	// DevFeeInfo retrieves a registered contract for fee distribution
	DevFeeInfo(context.Context, *QueryDevFeeInfoRequest) (*QueryDevFeeInfoResponse, error)
	// Params retrieves the fees module params
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// DevFeeInfosPerDeployer retrieves all contracts that a deployer has
	// registered for fee distribution
	DevFeeInfosPerDeployer(context.Context, *QueryDevFeeInfosPerDeployerRequest) (*QueryDevFeeInfosPerDeployerResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) DevFeeInfos(ctx context.Context, req *QueryDevFeeInfosRequest) (*QueryDevFeeInfosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DevFeeInfos not implemented")
}
func (*UnimplementedQueryServer) DevFeeInfo(ctx context.Context, req *QueryDevFeeInfoRequest) (*QueryDevFeeInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DevFeeInfo not implemented")
}
func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) DevFeeInfosPerDeployer(ctx context.Context, req *QueryDevFeeInfosPerDeployerRequest) (*QueryDevFeeInfosPerDeployerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DevFeeInfosPerDeployer not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_DevFeeInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDevFeeInfosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DevFeeInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evmos.fees.v1.Query/DevFeeInfos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DevFeeInfos(ctx, req.(*QueryDevFeeInfosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DevFeeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDevFeeInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DevFeeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evmos.fees.v1.Query/DevFeeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DevFeeInfo(ctx, req.(*QueryDevFeeInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evmos.fees.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DevFeeInfosPerDeployer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDevFeeInfosPerDeployerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DevFeeInfosPerDeployer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evmos.fees.v1.Query/DevFeeInfosPerDeployer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DevFeeInfosPerDeployer(ctx, req.(*QueryDevFeeInfosPerDeployerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "evmos.fees.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DevFeeInfos",
			Handler:    _Query_DevFeeInfos_Handler,
		},
		{
			MethodName: "DevFeeInfo",
			Handler:    _Query_DevFeeInfo_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "DevFeeInfosPerDeployer",
			Handler:    _Query_DevFeeInfosPerDeployer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "evmos/fees/v1/query.proto",
}

func (m *QueryDevFeeInfosRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDevFeeInfosRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDevFeeInfosRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDevFeeInfosResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDevFeeInfosResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDevFeeInfosResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Fees) > 0 {
		for iNdEx := len(m.Fees) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Fees[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryDevFeeInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDevFeeInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDevFeeInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDevFeeInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDevFeeInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDevFeeInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Fee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryDevFeeInfosPerDeployerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDevFeeInfosPerDeployerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDevFeeInfosPerDeployerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.DeployerAddress) > 0 {
		i -= len(m.DeployerAddress)
		copy(dAtA[i:], m.DeployerAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DeployerAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDevFeeInfosPerDeployerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDevFeeInfosPerDeployerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDevFeeInfosPerDeployerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Fees) > 0 {
		for iNdEx := len(m.Fees) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Fees[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryDevFeeInfosRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDevFeeInfosResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Fees) > 0 {
		for _, e := range m.Fees {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDevFeeInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDevFeeInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Fee.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryDevFeeInfosPerDeployerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DeployerAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDevFeeInfosPerDeployerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Fees) > 0 {
		for _, e := range m.Fees {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryDevFeeInfosRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDevFeeInfosRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDevFeeInfosRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDevFeeInfosResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDevFeeInfosResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDevFeeInfosResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fees = append(m.Fees, DevFeeInfo{})
			if err := m.Fees[len(m.Fees)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDevFeeInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDevFeeInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDevFeeInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDevFeeInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDevFeeInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDevFeeInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Fee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDevFeeInfosPerDeployerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDevFeeInfosPerDeployerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDevFeeInfosPerDeployerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeployerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeployerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDevFeeInfosPerDeployerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDevFeeInfosPerDeployerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDevFeeInfosPerDeployerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fees = append(m.Fees, DevFeeInfo{})
			if err := m.Fees[len(m.Fees)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
