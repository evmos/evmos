// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: evmos/fees/v1/fees.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// FeeContract defines an instance that organizes fee distribution conditions for the owner of a
// given smart contract
type FeeContract struct {
	// contract address
	Contract string `protobuf:"bytes,1,opt,name=contract,proto3" json:"contract,omitempty"`
	// deployment transaction hash
	Owner string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	// account receiving the fees
	WithdrawAddress string `protobuf:"bytes,3,opt,name=withdraw_address,json=withdrawAddress,proto3" json:"withdraw_address,omitempty"`
}

func (m *FeeContract) Reset()         { *m = FeeContract{} }
func (m *FeeContract) String() string { return proto.CompactTextString(m) }
func (*FeeContract) ProtoMessage()    {}
func (*FeeContract) Descriptor() ([]byte, []int) {
	return fileDescriptor_1527b6d4bf16c067, []int{0}
}
func (m *FeeContract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeeContract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeeContract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FeeContract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeeContract.Merge(m, src)
}
func (m *FeeContract) XXX_Size() int {
	return m.Size()
}
func (m *FeeContract) XXX_DiscardUnknown() {
	xxx_messageInfo_FeeContract.DiscardUnknown(m)
}

var xxx_messageInfo_FeeContract proto.InternalMessageInfo

func (m *FeeContract) GetContract() string {
	if m != nil {
		return m.Contract
	}
	return ""
}

func (m *FeeContract) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *FeeContract) GetWithdrawAddress() string {
	if m != nil {
		return m.WithdrawAddress
	}
	return ""
}

func init() {
	proto.RegisterType((*FeeContract)(nil), "evmos.fees.v1.FeeContract")
}

func init() { proto.RegisterFile("evmos/fees/v1/fees.proto", fileDescriptor_1527b6d4bf16c067) }

var fileDescriptor_1527b6d4bf16c067 = []byte{
	// 255 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x3c, 0x90, 0x41, 0x4e, 0xb4, 0x40,
	0x10, 0x85, 0xe1, 0xff, 0xa3, 0x51, 0x8c, 0xd1, 0x90, 0x59, 0x10, 0x16, 0xad, 0x71, 0x35, 0x6e,
	0xa8, 0x90, 0x39, 0x81, 0x63, 0xe2, 0x01, 0x5c, 0xba, 0x31, 0x0d, 0xd4, 0x00, 0x46, 0x28, 0xd2,
	0x55, 0xd3, 0xe8, 0x2d, 0x3c, 0x96, 0xcb, 0x59, 0xba, 0x34, 0x70, 0x11, 0x33, 0xdd, 0xa3, 0xab,
	0x7e, 0xef, 0x7d, 0x2f, 0xe9, 0xca, 0x8b, 0x12, 0xb4, 0x1d, 0x31, 0x6c, 0x10, 0x19, 0x6c, 0xee,
	0xde, 0x6c, 0x30, 0x24, 0x14, 0x9f, 0x3b, 0x92, 0xb9, 0xc4, 0xe6, 0xe9, 0xa2, 0xa6, 0x9a, 0x1c,
	0x81, 0xbd, 0xf2, 0xa5, 0xf4, 0xaa, 0x26, 0xaa, 0x5f, 0x11, 0x9c, 0x2b, 0xb6, 0x1b, 0x90, 0xb6,
	0x43, 0x16, 0xdd, 0x0d, 0x87, 0x82, 0x2a, 0x89, 0xf7, 0x1f, 0x14, 0x9a, 0x11, 0x6c, 0x5e, 0xa0,
	0xe8, 0x1c, 0x4a, 0x6a, 0x7b, 0xcf, 0x6f, 0x5e, 0xa2, 0xb3, 0x07, 0xc4, 0x7b, 0xea, 0xc5, 0xe8,
	0x52, 0xe2, 0x34, 0x3a, 0x29, 0x0f, 0x3a, 0x09, 0xaf, 0xc3, 0xe5, 0xe9, 0xe3, 0x9f, 0x8f, 0x17,
	0xd1, 0x11, 0x8d, 0x3d, 0x9a, 0xe4, 0x9f, 0x03, 0xde, 0xc4, 0xb7, 0xd1, 0xe5, 0xd8, 0x4a, 0x53,
	0x19, 0x3d, 0x3e, 0xeb, 0xaa, 0x32, 0xc8, 0x9c, 0xfc, 0x77, 0x85, 0x8b, 0xdf, 0xfc, 0xce, 0xc7,
	0xeb, 0xf5, 0xe7, 0xa4, 0xc2, 0xdd, 0xa4, 0xc2, 0xef, 0x49, 0x85, 0x1f, 0xb3, 0x0a, 0x76, 0xb3,
	0x0a, 0xbe, 0x66, 0x15, 0x3c, 0x2d, 0xeb, 0x56, 0x9a, 0x6d, 0x91, 0x95, 0xd4, 0x81, 0x34, 0xda,
	0x70, 0xcb, 0xe0, 0x87, 0xb1, 0x2b, 0x78, 0xf3, 0xeb, 0xc8, 0xfb, 0x80, 0x5c, 0x1c, 0xbb, 0xb3,
	0x57, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x34, 0x61, 0x30, 0x46, 0x38, 0x01, 0x00, 0x00,
}

func (m *FeeContract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeeContract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeeContract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WithdrawAddress) > 0 {
		i -= len(m.WithdrawAddress)
		copy(dAtA[i:], m.WithdrawAddress)
		i = encodeVarintFees(dAtA, i, uint64(len(m.WithdrawAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintFees(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Contract) > 0 {
		i -= len(m.Contract)
		copy(dAtA[i:], m.Contract)
		i = encodeVarintFees(dAtA, i, uint64(len(m.Contract)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintFees(dAtA []byte, offset int, v uint64) int {
	offset -= sovFees(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FeeContract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Contract)
	if l > 0 {
		n += 1 + l + sovFees(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovFees(uint64(l))
	}
	l = len(m.WithdrawAddress)
	if l > 0 {
		n += 1 + l + sovFees(uint64(l))
	}
	return n
}

func sovFees(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFees(x uint64) (n int) {
	return sovFees(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FeeContract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFees
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeeContract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeeContract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFees
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFees
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFees
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFees
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFees
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFees
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFees
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFees
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFees
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithdrawAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFees(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFees
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFees(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFees
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFees
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFees
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFees
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFees
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFees
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFees        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFees          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFees = fmt.Errorf("proto: unexpected end of group")
)
