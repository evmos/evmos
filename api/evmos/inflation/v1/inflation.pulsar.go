// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package inflationv1

import (
	fmt "fmt"
	io "io"
	reflect "reflect"
	sync "sync"

	_ "cosmossdk.io/api/amino"

	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

var (
	md_InflationDistribution                  protoreflect.MessageDescriptor
	fd_InflationDistribution_staking_rewards  protoreflect.FieldDescriptor
	fd_InflationDistribution_usage_incentives protoreflect.FieldDescriptor
	fd_InflationDistribution_community_pool   protoreflect.FieldDescriptor
)

func init() {
	file_evmos_inflation_v1_inflation_proto_init()
	md_InflationDistribution = File_evmos_inflation_v1_inflation_proto.Messages().ByName("InflationDistribution")
	fd_InflationDistribution_staking_rewards = md_InflationDistribution.Fields().ByName("staking_rewards")
	fd_InflationDistribution_usage_incentives = md_InflationDistribution.Fields().ByName("usage_incentives")
	fd_InflationDistribution_community_pool = md_InflationDistribution.Fields().ByName("community_pool")
}

var _ protoreflect.Message = (*fastReflection_InflationDistribution)(nil)

type fastReflection_InflationDistribution InflationDistribution

func (x *InflationDistribution) ProtoReflect() protoreflect.Message {
	return (*fastReflection_InflationDistribution)(x)
}

func (x *InflationDistribution) slowProtoReflect() protoreflect.Message {
	mi := &file_evmos_inflation_v1_inflation_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var (
	_fastReflection_InflationDistribution_messageType fastReflection_InflationDistribution_messageType
	_                                                 protoreflect.MessageType = fastReflection_InflationDistribution_messageType{}
)

type fastReflection_InflationDistribution_messageType struct{}

func (x fastReflection_InflationDistribution_messageType) Zero() protoreflect.Message {
	return (*fastReflection_InflationDistribution)(nil)
}

func (x fastReflection_InflationDistribution_messageType) New() protoreflect.Message {
	return new(fastReflection_InflationDistribution)
}

func (x fastReflection_InflationDistribution_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_InflationDistribution
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_InflationDistribution) Descriptor() protoreflect.MessageDescriptor {
	return md_InflationDistribution
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_InflationDistribution) Type() protoreflect.MessageType {
	return _fastReflection_InflationDistribution_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_InflationDistribution) New() protoreflect.Message {
	return new(fastReflection_InflationDistribution)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_InflationDistribution) Interface() protoreflect.ProtoMessage {
	return (*InflationDistribution)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_InflationDistribution) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.StakingRewards != "" {
		value := protoreflect.ValueOfString(x.StakingRewards)
		if !f(fd_InflationDistribution_staking_rewards, value) {
			return
		}
	}
	if x.UsageIncentives != "" {
		value := protoreflect.ValueOfString(x.UsageIncentives)
		if !f(fd_InflationDistribution_usage_incentives, value) {
			return
		}
	}
	if x.CommunityPool != "" {
		value := protoreflect.ValueOfString(x.CommunityPool)
		if !f(fd_InflationDistribution_community_pool, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_InflationDistribution) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "evmos.inflation.v1.InflationDistribution.staking_rewards":
		return x.StakingRewards != ""
	case "evmos.inflation.v1.InflationDistribution.usage_incentives":
		return x.UsageIncentives != ""
	case "evmos.inflation.v1.InflationDistribution.community_pool":
		return x.CommunityPool != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: evmos.inflation.v1.InflationDistribution"))
		}
		panic(fmt.Errorf("message evmos.inflation.v1.InflationDistribution does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_InflationDistribution) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "evmos.inflation.v1.InflationDistribution.staking_rewards":
		x.StakingRewards = ""
	case "evmos.inflation.v1.InflationDistribution.usage_incentives":
		x.UsageIncentives = ""
	case "evmos.inflation.v1.InflationDistribution.community_pool":
		x.CommunityPool = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: evmos.inflation.v1.InflationDistribution"))
		}
		panic(fmt.Errorf("message evmos.inflation.v1.InflationDistribution does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_InflationDistribution) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "evmos.inflation.v1.InflationDistribution.staking_rewards":
		value := x.StakingRewards
		return protoreflect.ValueOfString(value)
	case "evmos.inflation.v1.InflationDistribution.usage_incentives":
		value := x.UsageIncentives
		return protoreflect.ValueOfString(value)
	case "evmos.inflation.v1.InflationDistribution.community_pool":
		value := x.CommunityPool
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: evmos.inflation.v1.InflationDistribution"))
		}
		panic(fmt.Errorf("message evmos.inflation.v1.InflationDistribution does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_InflationDistribution) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "evmos.inflation.v1.InflationDistribution.staking_rewards":
		x.StakingRewards = value.Interface().(string)
	case "evmos.inflation.v1.InflationDistribution.usage_incentives":
		x.UsageIncentives = value.Interface().(string)
	case "evmos.inflation.v1.InflationDistribution.community_pool":
		x.CommunityPool = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: evmos.inflation.v1.InflationDistribution"))
		}
		panic(fmt.Errorf("message evmos.inflation.v1.InflationDistribution does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_InflationDistribution) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "evmos.inflation.v1.InflationDistribution.staking_rewards":
		panic(fmt.Errorf("field staking_rewards of message evmos.inflation.v1.InflationDistribution is not mutable"))
	case "evmos.inflation.v1.InflationDistribution.usage_incentives":
		panic(fmt.Errorf("field usage_incentives of message evmos.inflation.v1.InflationDistribution is not mutable"))
	case "evmos.inflation.v1.InflationDistribution.community_pool":
		panic(fmt.Errorf("field community_pool of message evmos.inflation.v1.InflationDistribution is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: evmos.inflation.v1.InflationDistribution"))
		}
		panic(fmt.Errorf("message evmos.inflation.v1.InflationDistribution does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_InflationDistribution) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "evmos.inflation.v1.InflationDistribution.staking_rewards":
		return protoreflect.ValueOfString("")
	case "evmos.inflation.v1.InflationDistribution.usage_incentives":
		return protoreflect.ValueOfString("")
	case "evmos.inflation.v1.InflationDistribution.community_pool":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: evmos.inflation.v1.InflationDistribution"))
		}
		panic(fmt.Errorf("message evmos.inflation.v1.InflationDistribution does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_InflationDistribution) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in evmos.inflation.v1.InflationDistribution", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_InflationDistribution) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_InflationDistribution) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_InflationDistribution) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_InflationDistribution) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*InflationDistribution)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.StakingRewards)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.UsageIncentives)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.CommunityPool)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*InflationDistribution)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.CommunityPool) > 0 {
			i -= len(x.CommunityPool)
			copy(dAtA[i:], x.CommunityPool)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.CommunityPool)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.UsageIncentives) > 0 {
			i -= len(x.UsageIncentives)
			copy(dAtA[i:], x.UsageIncentives)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.UsageIncentives)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.StakingRewards) > 0 {
			i -= len(x.StakingRewards)
			copy(dAtA[i:], x.StakingRewards)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.StakingRewards)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*InflationDistribution)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: InflationDistribution: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: InflationDistribution: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field StakingRewards", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.StakingRewards = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field UsageIncentives", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.UsageIncentives = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CommunityPool", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.CommunityPool = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_ExponentialCalculation                protoreflect.MessageDescriptor
	fd_ExponentialCalculation_a              protoreflect.FieldDescriptor
	fd_ExponentialCalculation_r              protoreflect.FieldDescriptor
	fd_ExponentialCalculation_c              protoreflect.FieldDescriptor
	fd_ExponentialCalculation_bonding_target protoreflect.FieldDescriptor
	fd_ExponentialCalculation_max_variance   protoreflect.FieldDescriptor
)

func init() {
	file_evmos_inflation_v1_inflation_proto_init()
	md_ExponentialCalculation = File_evmos_inflation_v1_inflation_proto.Messages().ByName("ExponentialCalculation")
	fd_ExponentialCalculation_a = md_ExponentialCalculation.Fields().ByName("a")
	fd_ExponentialCalculation_r = md_ExponentialCalculation.Fields().ByName("r")
	fd_ExponentialCalculation_c = md_ExponentialCalculation.Fields().ByName("c")
	fd_ExponentialCalculation_bonding_target = md_ExponentialCalculation.Fields().ByName("bonding_target")
	fd_ExponentialCalculation_max_variance = md_ExponentialCalculation.Fields().ByName("max_variance")
}

var _ protoreflect.Message = (*fastReflection_ExponentialCalculation)(nil)

type fastReflection_ExponentialCalculation ExponentialCalculation

func (x *ExponentialCalculation) ProtoReflect() protoreflect.Message {
	return (*fastReflection_ExponentialCalculation)(x)
}

func (x *ExponentialCalculation) slowProtoReflect() protoreflect.Message {
	mi := &file_evmos_inflation_v1_inflation_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var (
	_fastReflection_ExponentialCalculation_messageType fastReflection_ExponentialCalculation_messageType
	_                                                  protoreflect.MessageType = fastReflection_ExponentialCalculation_messageType{}
)

type fastReflection_ExponentialCalculation_messageType struct{}

func (x fastReflection_ExponentialCalculation_messageType) Zero() protoreflect.Message {
	return (*fastReflection_ExponentialCalculation)(nil)
}

func (x fastReflection_ExponentialCalculation_messageType) New() protoreflect.Message {
	return new(fastReflection_ExponentialCalculation)
}

func (x fastReflection_ExponentialCalculation_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_ExponentialCalculation
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_ExponentialCalculation) Descriptor() protoreflect.MessageDescriptor {
	return md_ExponentialCalculation
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_ExponentialCalculation) Type() protoreflect.MessageType {
	return _fastReflection_ExponentialCalculation_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_ExponentialCalculation) New() protoreflect.Message {
	return new(fastReflection_ExponentialCalculation)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_ExponentialCalculation) Interface() protoreflect.ProtoMessage {
	return (*ExponentialCalculation)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_ExponentialCalculation) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.A != "" {
		value := protoreflect.ValueOfString(x.A)
		if !f(fd_ExponentialCalculation_a, value) {
			return
		}
	}
	if x.R != "" {
		value := protoreflect.ValueOfString(x.R)
		if !f(fd_ExponentialCalculation_r, value) {
			return
		}
	}
	if x.C != "" {
		value := protoreflect.ValueOfString(x.C)
		if !f(fd_ExponentialCalculation_c, value) {
			return
		}
	}
	if x.BondingTarget != "" {
		value := protoreflect.ValueOfString(x.BondingTarget)
		if !f(fd_ExponentialCalculation_bonding_target, value) {
			return
		}
	}
	if x.MaxVariance != "" {
		value := protoreflect.ValueOfString(x.MaxVariance)
		if !f(fd_ExponentialCalculation_max_variance, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_ExponentialCalculation) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "evmos.inflation.v1.ExponentialCalculation.a":
		return x.A != ""
	case "evmos.inflation.v1.ExponentialCalculation.r":
		return x.R != ""
	case "evmos.inflation.v1.ExponentialCalculation.c":
		return x.C != ""
	case "evmos.inflation.v1.ExponentialCalculation.bonding_target":
		return x.BondingTarget != ""
	case "evmos.inflation.v1.ExponentialCalculation.max_variance":
		return x.MaxVariance != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: evmos.inflation.v1.ExponentialCalculation"))
		}
		panic(fmt.Errorf("message evmos.inflation.v1.ExponentialCalculation does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ExponentialCalculation) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "evmos.inflation.v1.ExponentialCalculation.a":
		x.A = ""
	case "evmos.inflation.v1.ExponentialCalculation.r":
		x.R = ""
	case "evmos.inflation.v1.ExponentialCalculation.c":
		x.C = ""
	case "evmos.inflation.v1.ExponentialCalculation.bonding_target":
		x.BondingTarget = ""
	case "evmos.inflation.v1.ExponentialCalculation.max_variance":
		x.MaxVariance = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: evmos.inflation.v1.ExponentialCalculation"))
		}
		panic(fmt.Errorf("message evmos.inflation.v1.ExponentialCalculation does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_ExponentialCalculation) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "evmos.inflation.v1.ExponentialCalculation.a":
		value := x.A
		return protoreflect.ValueOfString(value)
	case "evmos.inflation.v1.ExponentialCalculation.r":
		value := x.R
		return protoreflect.ValueOfString(value)
	case "evmos.inflation.v1.ExponentialCalculation.c":
		value := x.C
		return protoreflect.ValueOfString(value)
	case "evmos.inflation.v1.ExponentialCalculation.bonding_target":
		value := x.BondingTarget
		return protoreflect.ValueOfString(value)
	case "evmos.inflation.v1.ExponentialCalculation.max_variance":
		value := x.MaxVariance
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: evmos.inflation.v1.ExponentialCalculation"))
		}
		panic(fmt.Errorf("message evmos.inflation.v1.ExponentialCalculation does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ExponentialCalculation) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "evmos.inflation.v1.ExponentialCalculation.a":
		x.A = value.Interface().(string)
	case "evmos.inflation.v1.ExponentialCalculation.r":
		x.R = value.Interface().(string)
	case "evmos.inflation.v1.ExponentialCalculation.c":
		x.C = value.Interface().(string)
	case "evmos.inflation.v1.ExponentialCalculation.bonding_target":
		x.BondingTarget = value.Interface().(string)
	case "evmos.inflation.v1.ExponentialCalculation.max_variance":
		x.MaxVariance = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: evmos.inflation.v1.ExponentialCalculation"))
		}
		panic(fmt.Errorf("message evmos.inflation.v1.ExponentialCalculation does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ExponentialCalculation) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "evmos.inflation.v1.ExponentialCalculation.a":
		panic(fmt.Errorf("field a of message evmos.inflation.v1.ExponentialCalculation is not mutable"))
	case "evmos.inflation.v1.ExponentialCalculation.r":
		panic(fmt.Errorf("field r of message evmos.inflation.v1.ExponentialCalculation is not mutable"))
	case "evmos.inflation.v1.ExponentialCalculation.c":
		panic(fmt.Errorf("field c of message evmos.inflation.v1.ExponentialCalculation is not mutable"))
	case "evmos.inflation.v1.ExponentialCalculation.bonding_target":
		panic(fmt.Errorf("field bonding_target of message evmos.inflation.v1.ExponentialCalculation is not mutable"))
	case "evmos.inflation.v1.ExponentialCalculation.max_variance":
		panic(fmt.Errorf("field max_variance of message evmos.inflation.v1.ExponentialCalculation is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: evmos.inflation.v1.ExponentialCalculation"))
		}
		panic(fmt.Errorf("message evmos.inflation.v1.ExponentialCalculation does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_ExponentialCalculation) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "evmos.inflation.v1.ExponentialCalculation.a":
		return protoreflect.ValueOfString("")
	case "evmos.inflation.v1.ExponentialCalculation.r":
		return protoreflect.ValueOfString("")
	case "evmos.inflation.v1.ExponentialCalculation.c":
		return protoreflect.ValueOfString("")
	case "evmos.inflation.v1.ExponentialCalculation.bonding_target":
		return protoreflect.ValueOfString("")
	case "evmos.inflation.v1.ExponentialCalculation.max_variance":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: evmos.inflation.v1.ExponentialCalculation"))
		}
		panic(fmt.Errorf("message evmos.inflation.v1.ExponentialCalculation does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_ExponentialCalculation) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in evmos.inflation.v1.ExponentialCalculation", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_ExponentialCalculation) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ExponentialCalculation) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_ExponentialCalculation) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_ExponentialCalculation) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*ExponentialCalculation)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.A)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.R)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.C)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.BondingTarget)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.MaxVariance)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*ExponentialCalculation)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.MaxVariance) > 0 {
			i -= len(x.MaxVariance)
			copy(dAtA[i:], x.MaxVariance)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.MaxVariance)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.BondingTarget) > 0 {
			i -= len(x.BondingTarget)
			copy(dAtA[i:], x.BondingTarget)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.BondingTarget)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.C) > 0 {
			i -= len(x.C)
			copy(dAtA[i:], x.C)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.C)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.R) > 0 {
			i -= len(x.R)
			copy(dAtA[i:], x.R)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.R)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.A) > 0 {
			i -= len(x.A)
			copy(dAtA[i:], x.A)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.A)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*ExponentialCalculation)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ExponentialCalculation: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ExponentialCalculation: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field A", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.A = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field R", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.R = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field C", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.C = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BondingTarget", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.BondingTarget = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaxVariance", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.MaxVariance = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Copyright Tharsis Labs Ltd.(Evmos)
// SPDX-License-Identifier:ENCL-1.0(https://github.com/evmos/evmos/blob/main/LICENSE)

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: evmos/inflation/v1/inflation.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// InflationDistribution defines the distribution in which inflation is
// allocated through minting on each epoch (staking, incentives, community). It
// excludes the team vesting distribution, as this is minted once at genesis.
// The initial InflationDistribution can be calculated from the Evmos Token
// Model like this:
// mintDistribution1 = distribution1 / (1 - teamVestingDistribution)
// 0.5333333         = 40%           / (1 - 25%)
type InflationDistribution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// staking_rewards defines the proportion of the minted minted_denom that is
	// to be allocated as staking rewards
	StakingRewards string `protobuf:"bytes,1,opt,name=staking_rewards,json=stakingRewards,proto3" json:"staking_rewards,omitempty"`
	// Deprecated: usage_incentives defines the proportion of the minted minted_denom that is
	// to be allocated to the incentives module address
	//
	// Deprecated: Do not use.
	UsageIncentives string `protobuf:"bytes,2,opt,name=usage_incentives,json=usageIncentives,proto3" json:"usage_incentives,omitempty"`
	// community_pool defines the proportion of the minted minted_denom that is to
	// be allocated to the community pool
	CommunityPool string `protobuf:"bytes,3,opt,name=community_pool,json=communityPool,proto3" json:"community_pool,omitempty"`
}

func (x *InflationDistribution) Reset() {
	*x = InflationDistribution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evmos_inflation_v1_inflation_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InflationDistribution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InflationDistribution) ProtoMessage() {}

// Deprecated: Use InflationDistribution.ProtoReflect.Descriptor instead.
func (*InflationDistribution) Descriptor() ([]byte, []int) {
	return file_evmos_inflation_v1_inflation_proto_rawDescGZIP(), []int{0}
}

func (x *InflationDistribution) GetStakingRewards() string {
	if x != nil {
		return x.StakingRewards
	}
	return ""
}

// Deprecated: Do not use.
func (x *InflationDistribution) GetUsageIncentives() string {
	if x != nil {
		return x.UsageIncentives
	}
	return ""
}

func (x *InflationDistribution) GetCommunityPool() string {
	if x != nil {
		return x.CommunityPool
	}
	return ""
}

// ExponentialCalculation holds factors to calculate exponential inflation on
// each period. Calculation reference:
// periodProvision = exponentialDecay       *  bondingIncentive
// f(x)            = (a * (1 - r) ^ x + c)  *  (1 + max_variance - bondedRatio *
// (max_variance / bonding_target))
type ExponentialCalculation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// a defines the initial value
	A string `protobuf:"bytes,1,opt,name=a,proto3" json:"a,omitempty"`
	// r defines the reduction factor
	R string `protobuf:"bytes,2,opt,name=r,proto3" json:"r,omitempty"`
	// c defines the parameter for long term inflation
	C string `protobuf:"bytes,3,opt,name=c,proto3" json:"c,omitempty"`
	// bonding_target
	BondingTarget string `protobuf:"bytes,4,opt,name=bonding_target,json=bondingTarget,proto3" json:"bonding_target,omitempty"`
	// max_variance
	MaxVariance string `protobuf:"bytes,5,opt,name=max_variance,json=maxVariance,proto3" json:"max_variance,omitempty"`
}

func (x *ExponentialCalculation) Reset() {
	*x = ExponentialCalculation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evmos_inflation_v1_inflation_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExponentialCalculation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExponentialCalculation) ProtoMessage() {}

// Deprecated: Use ExponentialCalculation.ProtoReflect.Descriptor instead.
func (*ExponentialCalculation) Descriptor() ([]byte, []int) {
	return file_evmos_inflation_v1_inflation_proto_rawDescGZIP(), []int{1}
}

func (x *ExponentialCalculation) GetA() string {
	if x != nil {
		return x.A
	}
	return ""
}

func (x *ExponentialCalculation) GetR() string {
	if x != nil {
		return x.R
	}
	return ""
}

func (x *ExponentialCalculation) GetC() string {
	if x != nil {
		return x.C
	}
	return ""
}

func (x *ExponentialCalculation) GetBondingTarget() string {
	if x != nil {
		return x.BondingTarget
	}
	return ""
}

func (x *ExponentialCalculation) GetMaxVariance() string {
	if x != nil {
		return x.MaxVariance
	}
	return ""
}

var File_evmos_inflation_v1_inflation_proto protoreflect.FileDescriptor

var file_evmos_inflation_v1_inflation_proto_rawDesc = []byte{
	0x0a, 0x22, 0x65, 0x76, 0x6d, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x66, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x66, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x65, 0x76, 0x6d, 0x6f, 0x73, 0x2e, 0x69, 0x6e, 0x66, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11,
	0x61, 0x6d, 0x69, 0x6e, 0x6f, 0x2f, 0x61, 0x6d, 0x69, 0x6e, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x92, 0x02, 0x0a, 0x15, 0x49, 0x6e, 0x66, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x0f, 0x73,
	0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e,
	0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x0e,
	0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x55,
	0x0a, 0x10, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x76,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x18, 0x01, 0xc8, 0xde, 0x1f, 0x00,
	0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f,
	0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0xa8,
	0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x0f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x63, 0x65, 0x6e,
	0x74, 0x69, 0x76, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xc8,
	0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b,
	0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44,
	0x65, 0x63, 0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x50, 0x6f, 0x6f, 0x6c, 0x22, 0xde, 0x02, 0x0a, 0x16, 0x45, 0x78, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x36, 0x0a, 0x01, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xc8, 0xde,
	0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e,
	0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65,
	0x63, 0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x01, 0x61, 0x12, 0x36, 0x0a, 0x01, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e,
	0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x01,
	0x72, 0x12, 0x36, 0x0a, 0x01, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xc8, 0xde,
	0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e,
	0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65,
	0x63, 0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x01, 0x63, 0x12, 0x4f, 0x0a, 0x0e, 0x62, 0x6f, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x28, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67,
	0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x0d, 0x62, 0x6f, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x4b, 0x0a, 0x0c, 0x6d, 0x61,
	0x78, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x28, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61,
	0x63, 0x79, 0x44, 0x65, 0x63, 0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x42, 0xc3, 0x01, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x2e,
	0x65, 0x76, 0x6d, 0x6f, 0x73, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x42, 0x0e, 0x49, 0x6e, 0x66, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e,
	0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x76, 0x6d, 0x6f, 0x73, 0x2f, 0x69, 0x6e, 0x66,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x3b, 0x69, 0x6e, 0x66, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x45, 0x49, 0x58, 0xaa, 0x02, 0x12, 0x45, 0x76,
	0x6d, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x66, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x31,
	0xca, 0x02, 0x12, 0x45, 0x76, 0x6d, 0x6f, 0x73, 0x5c, 0x49, 0x6e, 0x66, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1e, 0x45, 0x76, 0x6d, 0x6f, 0x73, 0x5c, 0x49, 0x6e,
	0x66, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x14, 0x45, 0x76, 0x6d, 0x6f, 0x73, 0x3a, 0x3a,
	0x49, 0x6e, 0x66, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_evmos_inflation_v1_inflation_proto_rawDescOnce sync.Once
	file_evmos_inflation_v1_inflation_proto_rawDescData = file_evmos_inflation_v1_inflation_proto_rawDesc
)

func file_evmos_inflation_v1_inflation_proto_rawDescGZIP() []byte {
	file_evmos_inflation_v1_inflation_proto_rawDescOnce.Do(func() {
		file_evmos_inflation_v1_inflation_proto_rawDescData = protoimpl.X.CompressGZIP(file_evmos_inflation_v1_inflation_proto_rawDescData)
	})
	return file_evmos_inflation_v1_inflation_proto_rawDescData
}

var (
	file_evmos_inflation_v1_inflation_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
	file_evmos_inflation_v1_inflation_proto_goTypes  = []interface{}{
		(*InflationDistribution)(nil),  // 0: evmos.inflation.v1.InflationDistribution
		(*ExponentialCalculation)(nil), // 1: evmos.inflation.v1.ExponentialCalculation
	}
)

var file_evmos_inflation_v1_inflation_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_evmos_inflation_v1_inflation_proto_init() }
func file_evmos_inflation_v1_inflation_proto_init() {
	if File_evmos_inflation_v1_inflation_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_evmos_inflation_v1_inflation_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InflationDistribution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evmos_inflation_v1_inflation_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExponentialCalculation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_evmos_inflation_v1_inflation_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_evmos_inflation_v1_inflation_proto_goTypes,
		DependencyIndexes: file_evmos_inflation_v1_inflation_proto_depIdxs,
		MessageInfos:      file_evmos_inflation_v1_inflation_proto_msgTypes,
	}.Build()
	File_evmos_inflation_v1_inflation_proto = out.File
	file_evmos_inflation_v1_inflation_proto_rawDesc = nil
	file_evmos_inflation_v1_inflation_proto_goTypes = nil
	file_evmos_inflation_v1_inflation_proto_depIdxs = nil
}
